<?xml version="1.0" encoding="UTF-8"?>
<testsuites name="Mocha Tests" time="157.1220" tests="738" failures="0" skipped="17">
  <testsuite name="Root Suite" timestamp="2021-12-09T20:06:19" tests="0" time="0.0000" failures="0">
  </testsuite>
  <testsuite name="EarlyPassportSkin" timestamp="2021-12-09T20:06:19" tests="1" file="/Users/gabriel/dev/contracts/test/contracts/global/earlyPassportSkin.test.ts" time="0.0000" failures="0">
    <testcase name="EarlyPassportSkin is applicable on the DefiPassport" time="0.4140" classname="is applicable on the DefiPassport">
    </testcase>
  </testsuite>
  <testsuite name="#safeMint" timestamp="2021-12-09T20:06:22" tests="6" file="/Users/gabriel/dev/contracts/test/contracts/global/earlyPassportSkin.test.ts" time="0.9620" failures="0">
    <testcase name="EarlyPassportSkin #safeMint reverts if user has no passport" time="0.0200" classname="reverts if user has no passport">
    </testcase>
    <testcase name="EarlyPassportSkin #safeMint mints the skin NFT to the user" time="0.1870" classname="mints the skin NFT to the user">
    </testcase>
    <testcase name="EarlyPassportSkin #safeMint reverts if user has a passport ID greater than the threshold" time="0.2660" classname="reverts if user has a passport ID greater than the threshold">
    </testcase>
    <testcase name="EarlyPassportSkin #safeMint sets the tokenURI" time="0.1430" classname="sets the tokenURI">
    </testcase>
    <testcase name="EarlyPassportSkin #safeMint reverts if user already has an early passport skin minted" time="0.1610" classname="reverts if user already has an early passport skin minted">
    </testcase>
    <testcase name="EarlyPassportSkin #safeMint reverts if user mints, transfers, then mints again" time="0.1670" classname="reverts if user mints, transfers, then mints again">
    </testcase>
  </testsuite>
  <testsuite name="#setPassportIdThreshold" timestamp="2021-12-09T20:06:23" tests="2" file="/Users/gabriel/dev/contracts/test/contracts/global/earlyPassportSkin.test.ts" time="0.0330" failures="0">
    <testcase name="EarlyPassportSkin #setPassportIdThreshold reverts if called by non-owner" time="0.0070" classname="reverts if called by non-owner">
    </testcase>
    <testcase name="EarlyPassportSkin #setPassportIdThreshold sets the passport id threshold" time="0.0210" classname="sets the passport id threshold">
    </testcase>
  </testsuite>
  <testsuite name="#setBaseURI" timestamp="2021-12-09T20:06:23" tests="2" file="/Users/gabriel/dev/contracts/test/contracts/global/earlyPassportSkin.test.ts" time="0.0320" failures="0">
    <testcase name="EarlyPassportSkin #setBaseURI reverts if called by non-owner" time="0.0100" classname="reverts if called by non-owner">
    </testcase>
    <testcase name="EarlyPassportSkin #setBaseURI sets the base URL" time="0.0190" classname="sets the base URL">
    </testcase>
  </testsuite>
  <testsuite name="PassportWaitlist" timestamp="2021-12-09T20:06:23" tests="0" file="/Users/gabriel/dev/contracts/test/contracts/global/passportWaitlist.test.ts" time="0.0000" failures="0">
  </testsuite>
  <testsuite name="#constructor" timestamp="2021-12-09T20:06:23" tests="1" file="/Users/gabriel/dev/contracts/test/contracts/global/passportWaitlist.test.ts" time="0.0180" failures="0">
    <testcase name="PassportWaitlist #constructor sets the payment token and amount" time="0.0150" classname="sets the payment token and amount">
    </testcase>
  </testsuite>
  <testsuite name="#applyForPassport" timestamp="2021-12-09T20:06:23" tests="4" file="/Users/gabriel/dev/contracts/test/contracts/global/passportWaitlist.test.ts" time="0.2770" failures="0">
    <testcase name="PassportWaitlist #applyForPassport reverts if user does not have enough tokens to pay" time="0.0560" classname="reverts if user does not have enough tokens to pay">
    </testcase>
    <testcase name="PassportWaitlist #applyForPassport reverts if user had not approved enough tokens" time="0.0330" classname="reverts if user had not approved enough tokens">
    </testcase>
    <testcase name="PassportWaitlist #applyForPassport applies for the passport" time="0.0860" classname="applies for the passport">
    </testcase>
    <testcase name="PassportWaitlist #applyForPassport transferred the payment to the receiver" time="0.0950" classname="transferred the payment to the receiver">
    </testcase>
  </testsuite>
  <testsuite name="#payableApplyForPassport" timestamp="2021-12-09T20:06:23" tests="4" file="/Users/gabriel/dev/contracts/test/contracts/global/passportWaitlist.test.ts" time="0.3340" failures="0">
    <testcase name="PassportWaitlist #payableApplyForPassport reverts if a token currency is set" time="0.0150" classname="reverts if a token currency is set">
    </testcase>
    <testcase name="PassportWaitlist #payableApplyForPassport reverts if paying more or less the payment amount" time="0.0130" classname="reverts if paying more or less the payment amount">
    </testcase>
    <testcase name="PassportWaitlist #payableApplyForPassport applies for the passport" time="0.0390" classname="applies for the passport">
    </testcase>
    <testcase name="PassportWaitlist #payableApplyForPassport transferred the payment to the receiver" time="0.0160" classname="transferred the payment to the receiver">
    </testcase>
  </testsuite>
  <testsuite name="#setPayment" timestamp="2021-12-09T20:06:24" tests="2" file="/Users/gabriel/dev/contracts/test/contracts/global/passportWaitlist.test.ts" time="0.0590" failures="0">
    <testcase name="PassportWaitlist #setPayment reverts if called by non-owner" time="0.0070" classname="reverts if called by non-owner">
    </testcase>
    <testcase name="PassportWaitlist #setPayment sets the payment token, amount and receiver" time="0.0160" classname="sets the payment token, amount and receiver">
    </testcase>
  </testsuite>
  <testsuite name="#applyOnBehalf" timestamp="2021-12-09T20:06:24" tests="2" file="/Users/gabriel/dev/contracts/test/contracts/global/passportWaitlist.test.ts" time="0.0320" failures="0">
    <testcase name="PassportWaitlist #applyOnBehalf reverts if called by non-owner" time="0.0070" classname="reverts if called by non-owner">
    </testcase>
    <testcase name="PassportWaitlist #applyOnBehalf emits UserApplied for all given users" time="0.0210" classname="emits UserApplied for all given users">
    </testcase>
  </testsuite>
  <testsuite name="WhitelistBatch" timestamp="2021-12-09T20:06:24" tests="0" file="/Users/gabriel/dev/contracts/test/contracts/global/waitlistBatch.test.ts" time="0.0000" failures="0">
  </testsuite>
  <testsuite name="#constructor" timestamp="2021-12-09T20:06:24" tests="1" file="/Users/gabriel/dev/contracts/test/contracts/global/waitlistBatch.test.ts" time="0.0130" failures="0">
    <testcase name="WhitelistBatch #constructor sets the deposit currency and the deposit lockup duration" time="0.0080" classname="sets the deposit currency and the deposit lockup duration">
    </testcase>
  </testsuite>
  <testsuite name="View functions" timestamp="2021-12-09T20:06:24" tests="0" file="/Users/gabriel/dev/contracts/test/contracts/global/waitlistBatch.test.ts" time="0.0000" failures="0">
  </testsuite>
  <testsuite name="#getBatchInfoForUser" timestamp="2021-12-09T20:06:24" tests="2" file="/Users/gabriel/dev/contracts/test/contracts/global/waitlistBatch.test.ts" time="0.1290" failures="0">
    <testcase name="WhitelistBatch View functions #getBatchInfoForUser returns false if user did not participate to a batch" time="0.0020" classname="returns false if user did not participate to a batch">
    </testcase>
    <testcase name="WhitelistBatch View functions #getBatchInfoForUser returns true, the batch number and the deposit amount for a user who participated" time="0.0960" classname="returns true, the batch number and the deposit amount for a user who participated">
    </testcase>
  </testsuite>
  <testsuite name="#getDepositRetrievalTimestamp" timestamp="2021-12-09T20:06:24" tests="3" file="/Users/gabriel/dev/contracts/test/contracts/global/waitlistBatch.test.ts" time="0.2040" failures="0">
    <testcase name="WhitelistBatch View functions #getDepositRetrievalTimestamp returns 0 if the user did not participate in a batch" time="0.0030" classname="returns 0 if the user did not participate in a batch">
    </testcase>
    <testcase name="WhitelistBatch View functions #getDepositRetrievalTimestamp returns 0 if the user&apos;s batch was not yet approved" time="0.0260" classname="returns 0 if the user&apos;s batch was not yet approved">
    </testcase>
    <testcase name="WhitelistBatch View functions #getDepositRetrievalTimestamp returns the epoch when the user can withdraw their funds" time="0.0380" classname="returns the epoch when the user can withdraw their funds">
    </testcase>
  </testsuite>
  <testsuite name="Mutative functions" timestamp="2021-12-09T20:06:24" tests="0" file="/Users/gabriel/dev/contracts/test/contracts/global/waitlistBatch.test.ts" time="0.0000" failures="0">
  </testsuite>
  <testsuite name="#applyToBatch" timestamp="2021-12-09T20:06:24" tests="7" file="/Users/gabriel/dev/contracts/test/contracts/global/waitlistBatch.test.ts" time="0.6780" failures="0">
    <testcase name="WhitelistBatch Mutative functions #applyToBatch cannot apply to a non-existent batch" time="0.0140" classname="cannot apply to a non-existent batch">
    </testcase>
    <testcase name="WhitelistBatch Mutative functions #applyToBatch cannot apply to a filled up batch" time="0.0540" classname="cannot apply to a filled up batch">
    </testcase>
    <testcase name="WhitelistBatch Mutative functions #applyToBatch cannot apply without having enough currency" time="0.0240" classname="cannot apply without having enough currency">
    </testcase>
    <testcase name="WhitelistBatch Mutative functions #applyToBatch cannot apply before the start time" time="0.0090" classname="cannot apply before the start time">
    </testcase>
    <testcase name="WhitelistBatch Mutative functions #applyToBatch cannot apply again after having reclaimed" time="0.1670" classname="cannot apply again after having reclaimed">
    </testcase>
    <testcase name="WhitelistBatch Mutative functions #applyToBatch can apply to a valid batch" time="0.0660" classname="can apply to a valid batch">
    </testcase>
    <testcase name="WhitelistBatch Mutative functions #applyToBatch cannot apply if already applied to a previous batch" time="0.0650" classname="cannot apply if already applied to a previous batch">
    </testcase>
  </testsuite>
  <testsuite name="#reclaimTokens" timestamp="2021-12-09T20:06:25" tests="7" file="/Users/gabriel/dev/contracts/test/contracts/global/waitlistBatch.test.ts" time="0.6930" failures="0">
    <testcase name="WhitelistBatch Mutative functions #reclaimTokens cannot reclaim tokens if caller did not participate in a batch" time="0.0320" classname="cannot reclaim tokens if caller did not participate in a batch">
    </testcase>
    <testcase name="WhitelistBatch Mutative functions #reclaimTokens cannot reclaim tokens twice" time="0.0910" classname="cannot reclaim tokens twice">
    </testcase>
    <testcase name="WhitelistBatch Mutative functions #reclaimTokens cannot reclaim if user is blacklisted" time="0.1010" classname="cannot reclaim if user is blacklisted">
    </testcase>
    <testcase name="WhitelistBatch Mutative functions #reclaimTokens reverts if the batch is not approved" time="0.0390" classname="reverts if the batch is not approved">
    </testcase>
    <testcase name="WhitelistBatch Mutative functions #reclaimTokens reverts if the batch is approved but the time limit has not passed" time="0.0450" classname="reverts if the batch is approved but the time limit has not passed">
    </testcase>
    <testcase name="WhitelistBatch Mutative functions #reclaimTokens reclaims the tokens to the user after the batch is approved and the time limit was passed" time="0.0910" classname="reclaims the tokens to the user after the batch is approved and the time limit was passed">
    </testcase>
    <testcase name="WhitelistBatch Mutative functions #reclaimTokens emits the TokensReclaimed event" time="0.1200" classname="emits the TokensReclaimed event">
    </testcase>
  </testsuite>
  <testsuite name="Admin functions" timestamp="2021-12-09T20:06:25" tests="0" file="/Users/gabriel/dev/contracts/test/contracts/global/waitlistBatch.test.ts" time="0.0000" failures="0">
  </testsuite>
  <testsuite name="#addNewBatch" timestamp="2021-12-09T20:06:25" tests="6" file="/Users/gabriel/dev/contracts/test/contracts/global/waitlistBatch.test.ts" time="0.1030" failures="0">
    <testcase name="WhitelistBatch Admin functions #addNewBatch cannot start a batch with the start date before now" time="0.0080" classname="cannot start a batch with the start date before now">
    </testcase>
    <testcase name="WhitelistBatch Admin functions #addNewBatch cannot start a batch with the deposit amount as 0" time="0.0030" classname="cannot start a batch with the deposit amount as 0">
    </testcase>
    <testcase name="WhitelistBatch Admin functions #addNewBatch cannot start a batch with 0 spots" time="0.0070" classname="cannot start a batch with 0 spots">
    </testcase>
    <testcase name="WhitelistBatch Admin functions #addNewBatch cannot start a batch as a non-owner" time="0.0050" classname="cannot start a batch as a non-owner">
    </testcase>
    <testcase name="WhitelistBatch Admin functions #addNewBatch can start a valid new batch as the owner" time="0.0410" classname="can start a valid new batch as the owner">
    </testcase>
    <testcase name="WhitelistBatch Admin functions #addNewBatch emits the NewBatchAdded event" time="0.0320" classname="emits the NewBatchAdded event">
    </testcase>
  </testsuite>
  <testsuite name="#approveBatch" timestamp="2021-12-09T20:06:26" tests="4" file="/Users/gabriel/dev/contracts/test/contracts/global/waitlistBatch.test.ts" time="0.1120" failures="0">
    <testcase name="WhitelistBatch Admin functions #approveBatch reverts if called by non-admin" time="0.0030" classname="reverts if called by non-admin">
    </testcase>
    <testcase name="WhitelistBatch Admin functions #approveBatch reverts if the batch does not exist" time="0.0060" classname="reverts if the batch does not exist">
    </testcase>
    <testcase name="WhitelistBatch Admin functions #approveBatch approves a batch" time="0.0150" classname="approves a batch">
    </testcase>
    <testcase name="WhitelistBatch Admin functions #approveBatch reverts if the batch was already approved" time="0.0120" classname="reverts if the batch was already approved">
    </testcase>
  </testsuite>
  <testsuite name="#changeBatchStartTimestamp" timestamp="2021-12-09T20:06:26" tests="5" file="/Users/gabriel/dev/contracts/test/contracts/global/waitlistBatch.test.ts" time="0.1270" failures="0">
    <testcase name="WhitelistBatch Admin functions #changeBatchStartTimestamp cannot change the batch start timestamp as a non-owner" time="0.0040" classname="cannot change the batch start timestamp as a non-owner">
    </testcase>
    <testcase name="WhitelistBatch Admin functions #changeBatchStartTimestamp cannot change the batch start timestamp for a non-existent batch" time="0.0040" classname="cannot change the batch start timestamp for a non-existent batch">
    </testcase>
    <testcase name="WhitelistBatch Admin functions #changeBatchStartTimestamp cannot change the batch start timestamp to the past" time="0.0070" classname="cannot change the batch start timestamp to the past">
    </testcase>
    <testcase name="WhitelistBatch Admin functions #changeBatchStartTimestamp can change the batch start timestamp as the owner" time="0.0180" classname="can change the batch start timestamp as the owner">
    </testcase>
    <testcase name="WhitelistBatch Admin functions #changeBatchStartTimestamp emits the BatchTimestampChanged event" time="0.0150" classname="emits the BatchTimestampChanged event">
    </testcase>
  </testsuite>
  <testsuite name="#changeBatchTotalSpots" timestamp="2021-12-09T20:06:26" tests="6" file="/Users/gabriel/dev/contracts/test/contracts/global/waitlistBatch.test.ts" time="0.1330" failures="0">
    <testcase name="WhitelistBatch Admin functions #changeBatchTotalSpots cannot change the total spots as a non-owner" time="0.0050" classname="cannot change the total spots as a non-owner">
    </testcase>
    <testcase name="WhitelistBatch Admin functions #changeBatchTotalSpots cannot change the total spots of an inexisting batch" time="0.0060" classname="cannot change the total spots of an inexisting batch">
    </testcase>
    <testcase name="WhitelistBatch Admin functions #changeBatchTotalSpots cannot change the total spots past the start date" time="0.0110" classname="cannot change the total spots past the start date">
    </testcase>
    <testcase name="WhitelistBatch Admin functions #changeBatchTotalSpots cannot change the total spots to less than the existing fill amount" time="0.0040" classname="cannot change the total spots to less than the existing fill amount">
    </testcase>
    <testcase name="WhitelistBatch Admin functions #changeBatchTotalSpots can change the total spots as the owner" time="0.0100" classname="can change the total spots as the owner">
    </testcase>
    <testcase name="WhitelistBatch Admin functions #changeBatchTotalSpots emits the BatchTotalSpotsUpdated event" time="0.0100" classname="emits the BatchTotalSpotsUpdated event">
    </testcase>
  </testsuite>
  <testsuite name="#transferTokens" timestamp="2021-12-09T20:06:26" tests="3" file="/Users/gabriel/dev/contracts/test/contracts/global/waitlistBatch.test.ts" time="0.1530" failures="0">
    <testcase name="WhitelistBatch Admin functions #transferTokens cannot transfer tokens as a non-owner" time="0.0040" classname="cannot transfer tokens as a non-owner">
    </testcase>
    <testcase name="WhitelistBatch Admin functions #transferTokens can transfer tokens as the owner" time="0.0440" classname="can transfer tokens as the owner">
    </testcase>
    <testcase name="WhitelistBatch Admin functions #transferTokens emits the TokensTransferred event" time="0.0460" classname="emits the TokensTransferred event">
    </testcase>
  </testsuite>
  <testsuite name="#setModerator" timestamp="2021-12-09T20:06:26" tests="3" file="/Users/gabriel/dev/contracts/test/contracts/global/waitlistBatch.test.ts" time="0.0390" failures="0">
    <testcase name="WhitelistBatch Admin functions #setModerator reverts if called by a normie" time="0.0100" classname="reverts if called by a normie">
    </testcase>
    <testcase name="WhitelistBatch Admin functions #setModerator sets the moderator if called by admin" time="0.0170" classname="sets the moderator if called by admin">
    </testcase>
    <testcase name="WhitelistBatch Admin functions #setModerator emits ModeratorSet event" time="0.0110" classname="emits ModeratorSet event">
    </testcase>
  </testsuite>
  <testsuite name="setDepositLockupDuration" timestamp="2021-12-09T20:06:26" tests="2" file="/Users/gabriel/dev/contracts/test/contracts/global/waitlistBatch.test.ts" time="0.0260" failures="0">
    <testcase name="WhitelistBatch Admin functions setDepositLockupDuration reverts if called by non-owner" time="0.0080" classname="reverts if called by non-owner">
    </testcase>
    <testcase name="WhitelistBatch Admin functions setDepositLockupDuration sets the deposit lockup duration" time="0.0150" classname="sets the deposit lockup duration">
    </testcase>
  </testsuite>
  <testsuite name="Moderator functions" timestamp="2021-12-09T20:06:26" tests="0" file="/Users/gabriel/dev/contracts/test/contracts/global/waitlistBatch.test.ts" time="0.0000" failures="0">
  </testsuite>
  <testsuite name="#addToBlacklist" timestamp="2021-12-09T20:06:26" tests="3" file="/Users/gabriel/dev/contracts/test/contracts/global/waitlistBatch.test.ts" time="0.0570" failures="0">
    <testcase name="WhitelistBatch Moderator functions #addToBlacklist reverts if called by non-moderator" time="0.0190" classname="reverts if called by non-moderator">
    </testcase>
    <testcase name="WhitelistBatch Moderator functions #addToBlacklist adds address to the blacklist" time="0.0150" classname="adds address to the blacklist">
    </testcase>
    <testcase name="WhitelistBatch Moderator functions #addToBlacklist emits AddedToBlacklist event" time="0.0110" classname="emits AddedToBlacklist event">
    </testcase>
  </testsuite>
  <testsuite name="#removeFromBlacklist" timestamp="2021-12-09T20:06:26" tests="3" file="/Users/gabriel/dev/contracts/test/contracts/global/waitlistBatch.test.ts" time="0.1000" failures="0">
    <testcase name="WhitelistBatch Moderator functions #removeFromBlacklist reverts if called by non-moderator" time="0.0050" classname="reverts if called by non-moderator">
    </testcase>
    <testcase name="WhitelistBatch Moderator functions #removeFromBlacklist removes address to the blacklist" time="0.0300" classname="removes address to the blacklist">
    </testcase>
    <testcase name="WhitelistBatch Moderator functions #removeFromBlacklist emits RemovedFromBlacklist event" time="0.0280" classname="emits RemovedFromBlacklist event">
    </testcase>
  </testsuite>
  <testsuite name="WhitelistSale" timestamp="2021-12-09T20:06:26" tests="0" file="/Users/gabriel/dev/contracts/test/contracts/global/whitelistSale.test.ts" time="0.0000" failures="0">
  </testsuite>
  <testsuite name="#setHardCap" timestamp="2021-12-09T20:06:26" tests="2" file="/Users/gabriel/dev/contracts/test/contracts/global/whitelistSale.test.ts" time="0.1270" failures="0">
    <testcase name="WhitelistSale #setHardCap should not be able to set the hard cap as a non-owner" time="0.0060" classname="should not be able to set the hard cap as a non-owner">
    </testcase>
    <testcase name="WhitelistSale #setHardCap should be able to set the hard cap as the owner" time="0.0180" classname="should be able to set the hard cap as the owner">
    </testcase>
  </testsuite>
  <testsuite name="#setAllocation" timestamp="2021-12-09T20:06:26" tests="4" file="/Users/gabriel/dev/contracts/test/contracts/global/whitelistSale.test.ts" time="0.3200" failures="0">
    <testcase name="WhitelistSale #setAllocation should not be able to set the allocation as a non-owner" time="0.0050" classname="should not be able to set the allocation as a non-owner">
    </testcase>
    <testcase name="WhitelistSale #setAllocation should not be able to set allocations if the users and allocations arrays have a different length" time="0.0100" classname="should not be able to set allocations if the users and allocations arrays have a different length">
    </testcase>
    <testcase name="WhitelistSale #setAllocation should be able to set the allocation correctly" time="0.0150" classname="should be able to set the allocation correctly">
    </testcase>
    <testcase name="WhitelistSale #setAllocation should be able to remove an allocation successfully" time="0.0650" classname="should be able to remove an allocation successfully">
    </testcase>
  </testsuite>
  <testsuite name="#claimAllocation" timestamp="2021-12-09T20:06:27" tests="7" file="/Users/gabriel/dev/contracts/test/contracts/global/whitelistSale.test.ts" time="0.7970" failures="0">
    <testcase name="WhitelistSale #claimAllocation should not be able to claim if the sale has not started" time="0.0300" classname="should not be able to claim if the sale has not started">
    </testcase>
    <testcase name="WhitelistSale #claimAllocation should not be able to cliam more than the allocation" time="0.0310" classname="should not be able to cliam more than the allocation">
    </testcase>
    <testcase name="WhitelistSale #claimAllocation should not be able to claim the allocation if the hardcap is met" time="0.1170" classname="should not be able to claim the allocation if the hardcap is met">
    </testcase>
    <testcase name="WhitelistSale #claimAllocation should not be able to claim more than the allocation if amountToClaim + amountSpent &gt; allocation" time="0.0580" classname="should not be able to claim more than the allocation if amountToClaim + amountSpent &gt; allocation">
    </testcase>
    <testcase name="WhitelistSale #claimAllocation should be able to spend up to the allocation" time="0.0500" classname="should be able to spend up to the allocation">
    </testcase>
    <testcase name="WhitelistSale #claimAllocation should be able to spend more if the allocation increases" time="0.0880" classname="should be able to spend more if the allocation increases">
    </testcase>
    <testcase name="WhitelistSale #claimAllocation should transfer the funds from user to owner" time="0.0470" classname="should transfer the funds from user to owner">
    </testcase>
  </testsuite>
  <testsuite name="#updateSaleStatus" timestamp="2021-12-09T20:06:28" tests="2" file="/Users/gabriel/dev/contracts/test/contracts/global/whitelistSale.test.ts" time="0.1560" failures="0">
    <testcase name="WhitelistSale #updateSaleStatus should not be able to update the sale status as a non-owner" time="0.0050" classname="should not be able to update the sale status as a non-owner">
    </testcase>
    <testcase name="WhitelistSale #updateSaleStatus should update the sale status as an owner" time="0.0340" classname="should update the sale status as an owner">
    </testcase>
  </testsuite>
  <testsuite name="Ownable contracts" timestamp="2021-12-09T20:06:28" tests="1" file="/Users/gabriel/dev/contracts/test/contracts/ownableContracts.test.ts" time="0.0000" failures="0">
    <testcase name="Ownable contracts ArcxToken is owned by ArcxTokenV2" time="0.3630" classname="ArcxToken is owned by ArcxTokenV2">
    </testcase>
  </testsuite>
  <testsuite name="contracts owned by the eoa owner" timestamp="2021-12-09T20:06:28" tests="11" file="/Users/gabriel/dev/contracts/test/contracts/ownableContracts.test.ts" time="3.3790" failures="0">
    <testcase name="Ownable contracts contracts owned by the eoa owner  KYF-T1 0x1f10ff148a0ad63a57f98530ab472568e90a72c5" time="0.3860" classname=" KYF-T1 0x1f10ff148a0ad63a57f98530ab472568e90a72c5">
    </testcase>
    <testcase name="Ownable contracts contracts owned by the eoa owner  KYF-T2 0x877E31c9c04e8a2A3Af59341635F5BC6ae0dDc13" time="0.3870" classname=" KYF-T2 0x877E31c9c04e8a2A3Af59341635F5BC6ae0dDc13">
    </testcase>
    <testcase name="Ownable contracts contracts owned by the eoa owner  SynthRegistry 0x372a4D34e9E9d96656F101aFf06a4a455396C974" time="0.2250" classname=" SynthRegistry 0x372a4D34e9E9d96656F101aFf06a4a455396C974">
    </testcase>
    <testcase name="Ownable contracts contracts owned by the eoa owner  KYFToken 0xD85e2772912213e0c584d80B2694c79D6a09E39A" time="0.2520" classname=" KYFToken 0xD85e2772912213e0c584d80B2694c79D6a09E39A">
    </testcase>
    <testcase name="Ownable contracts contracts owned by the eoa owner LINKUSD SpritzState 0x94F40fD4018586AaFb8A6AD95441e0b58cc4c058" time="0.2350" classname="LINKUSD SpritzState 0x94F40fD4018586AaFb8A6AD95441e0b58cc4c058">
    </testcase>
    <testcase name="Ownable contracts contracts owned by the eoa owner LINKUSD SyntheticToken 0x0E2EC54fC0B509F445631Bf4b91AB8168230C752" time="0.2210" classname="LINKUSD SyntheticToken 0x0E2EC54fC0B509F445631Bf4b91AB8168230C752">
    </testcase>
    <testcase name="Ownable contracts contracts owned by the eoa owner Pool-1 Pool-1 0xd1902581868163BEf61776cfD27228EE5074be8F" time="0.3200" classname="Pool-1 Pool-1 0xd1902581868163BEf61776cfD27228EE5074be8F">
    </testcase>
    <testcase name="Ownable contracts contracts owned by the eoa owner Pool-2 Pool-2 0xA9A9300Ab9A70c43C19d6F42e3308Be24d73D885" time="0.2930" classname="Pool-2 Pool-2 0xA9A9300Ab9A70c43C19d6F42e3308Be24d73D885">
    </testcase>
    <testcase name="Ownable contracts contracts owned by the eoa owner Pool-2.1 Pool-2.1 0x580836540CA183Ab71AA4C58253F5EEaaD2552Dc" time="0.3490" classname="Pool-2.1 Pool-2.1 0x580836540CA183Ab71AA4C58253F5EEaaD2552Dc">
    </testcase>
    <testcase name="Ownable contracts contracts owned by the eoa owner  SynthRegistryV2 0xeB739e889E74383562695D94C495F5F69F9E2559" time="0.4500" classname=" SynthRegistryV2 0xeB739e889E74383562695D94C495F5F69F9E2559">
    </testcase>
    <testcase name="Ownable contracts contracts owned by the eoa owner  SavingsRegistry 0x2948Ddf33b00686D7E58D2Eb3AA2469A1b52C7e4" time="0.2350" classname=" SavingsRegistry 0x2948Ddf33b00686D7E58D2Eb3AA2469A1b52C7e4">
    </testcase>
  </testsuite>
  <testsuite name="contracts owned by the ARCx Protocol DAO" timestamp="2021-12-09T20:06:31" tests="3" file="/Users/gabriel/dev/contracts/test/contracts/ownableContracts.test.ts" time="0.7420" failures="0">
    <testcase name="Ownable contracts contracts owned by the ARCx Protocol DAO  ArcDAO 0x1DEBBC50322150EB44DE3b663d5faA89c12b07ff" time="0.2410" classname=" ArcDAO 0x1DEBBC50322150EB44DE3b663d5faA89c12b07ff">
    </testcase>
    <testcase name="Ownable contracts contracts owned by the ARCx Protocol DAO  ArcxToken 0x1321f1f1aa541A56C31682c57b80ECfCCd9bB288" time="0.2330" classname=" ArcxToken 0x1321f1f1aa541A56C31682c57b80ECfCCd9bB288">
    </testcase>
    <testcase name="Ownable contracts contracts owned by the ARCx Protocol DAO  ArcDAO 0x7E32b84f3ED40787ACdaF91303317B78A6fAe470" time="0.2660" classname=" ArcDAO 0x7E32b84f3ED40787ACdaF91303317B78A6fAe470">
    </testcase>
  </testsuite>
  <testsuite name="contracts have admin" timestamp="2021-12-09T20:06:32" tests="34" file="/Users/gabriel/dev/contracts/test/contracts/ownableContracts.test.ts" time="12.1200" failures="0">
    <testcase name="Ownable contracts contracts have admin LINKUSD CoreProxy 0x5568Df89AF6Bc835B876fDc3B2d44ef63530e419" time="0.5770" classname="LINKUSD CoreProxy 0x5568Df89AF6Bc835B876fDc3B2d44ef63530e419">
    </testcase>
    <testcase name="Ownable contracts contracts have admin  SpritzCore 0x08Db418a5234337D76c78cCF630658D4e328FC69" time="0.2430" classname=" SpritzCore 0x08Db418a5234337D76c78cCF630658D4e328FC69">
    </testcase>
    <testcase name="Ownable contracts contracts have admin  SpritzCore 0x8e1fe752e51b05b9fe6eE95d8907695E0f3e2Ecd" time="0.2550" classname=" SpritzCore 0x8e1fe752e51b05b9fe6eE95d8907695E0f3e2Ecd">
    </testcase>
    <testcase name="Ownable contracts contracts have admin  SpritzCore 0xC8C2E1547298E09E5f18e4CDEA4A271FdadAB971" time="0.2680" classname=" SpritzCore 0xC8C2E1547298E09E5f18e4CDEA4A271FdadAB971">
    </testcase>
    <testcase name="Ownable contracts contracts have admin  SpritzCore 0x6981263d090734F2Bd2708D1bE30Db5594BDE400" time="0.1730" classname=" SpritzCore 0x6981263d090734F2Bd2708D1bE30Db5594BDE400">
    </testcase>
    <testcase name="Ownable contracts contracts have admin Pool-3 Proxy 0x38b25c0A9e61E226023B700ce4a6A4134eCAEeDF" time="0.4440" classname="Pool-3 Proxy 0x38b25c0A9e61E226023B700ce4a6A4134eCAEeDF">
    </testcase>
    <testcase name="Ownable contracts contracts have admin Pool-3 Implementation 0x140C21C364B9E72856C582CF7B6d37ee88B52140" time="0.1410" classname="Pool-3 Implementation 0x140C21C364B9E72856C582CF7B6d37ee88B52140">
    </testcase>
    <testcase name="Ownable contracts contracts have admin Pool-4 Proxy 0x8016F490D76346EBEC91707fD4Fb56A7fe64f694" time="0.4500" classname="Pool-4 Proxy 0x8016F490D76346EBEC91707fD4Fb56A7fe64f694">
    </testcase>
    <testcase name="Ownable contracts contracts have admin Pool-4 Implementation 0x57f52dAD9fcB361c67FF8c555720dc934dD5945D" time="0.1290" classname="Pool-4 Implementation 0x57f52dAD9fcB361c67FF8c555720dc934dD5945D">
    </testcase>
    <testcase name="Ownable contracts contracts have admin SkillsetMetadata Proxy 0xAc09434EAce70771AEcb75B3BdEB775B4c1B4Aef" time="0.5820" classname="SkillsetMetadata Proxy 0xAc09434EAce70771AEcb75B3BdEB775B4c1B4Aef">
    </testcase>
    <testcase name="Ownable contracts contracts have admin SkillsetMetadata Implementation 0x1D453D0c02D6ac3494A4be4f53e59F01abd0E6a3" time="0.1520" classname="SkillsetMetadata Implementation 0x1D453D0c02D6ac3494A4be4f53e59F01abd0E6a3">
    </testcase>
    <testcase name="Ownable contracts contracts have admin  SyntheticToken 0xA58B598d0503bAA97B877735c97C69Cc19c07904" time="0.3090" classname=" SyntheticToken 0xA58B598d0503bAA97B877735c97C69Cc19c07904">
    </testcase>
    <testcase name="Ownable contracts contracts have admin STABLEx SyntheticProxy 0xcD91538B91B4ba7797D39a2f66E63810b50A33d0" time="0.3660" classname="STABLEx SyntheticProxy 0xcD91538B91B4ba7797D39a2f66E63810b50A33d0">
    </testcase>
    <testcase name="Ownable contracts contracts have admin  MozartCore 0xC6a2A61C8A1c9614085207A2692D08ad78b9E425" time="0.2480" classname=" MozartCore 0xC6a2A61C8A1c9614085207A2692D08ad78b9E425">
    </testcase>
    <testcase name="Ownable contracts contracts have admin yUSD-STABLEx CoreProxy 0xEBFD7b965E1B4c5719a006dE1AcAf82a7C3A142C" time="0.5510" classname="yUSD-STABLEx CoreProxy 0xEBFD7b965E1B4c5719a006dE1AcAf82a7C3A142C">
    </testcase>
    <testcase name="Ownable contracts contracts have admin  MozartSavings 0x2C8eDbf218e2f9baAFaC71692f424E75D9f9755e" time="0.2450" classname=" MozartSavings 0x2C8eDbf218e2f9baAFaC71692f424E75D9f9755e">
    </testcase>
    <testcase name="Ownable contracts contracts have admin STABLEx SavingsProxy 0xec18FfEa29dACC0F47525529fd1fD1D4A40FE65c" time="0.3690" classname="STABLEx SavingsProxy 0xec18FfEa29dACC0F47525529fd1fD1D4A40FE65c">
    </testcase>
    <testcase name="Ownable contracts contracts have admin  MozartCore 0x0BCb3b8BeCaae10Acc13FDDc0aB09be3351Cd30d" time="0.1450" classname=" MozartCore 0x0BCb3b8BeCaae10Acc13FDDc0aB09be3351Cd30d">
    </testcase>
    <testcase name="Ownable contracts contracts have admin cUSDC-STABLEx CoreProxy 0x84EAD9Ce2e36b3e6cdf41C94D5397e5056b3d8d6" time="0.3860" classname="cUSDC-STABLEx CoreProxy 0x84EAD9Ce2e36b3e6cdf41C94D5397e5056b3d8d6">
    </testcase>
    <testcase name="Ownable contracts contracts have admin Pool-5 Implementation 0x58bF325843b25B4767A3ff4Ef69B1b7B47493528" time="0.2480" classname="Pool-5 Implementation 0x58bF325843b25B4767A3ff4Ef69B1b7B47493528">
    </testcase>
    <testcase name="Ownable contracts contracts have admin Pool-5 Proxy 0xd41a21F6a3DEbFe28b06ace2312A69c53107ceE5" time="0.3840" classname="Pool-5 Proxy 0xd41a21F6a3DEbFe28b06ace2312A69c53107ceE5">
    </testcase>
    <testcase name="Ownable contracts contracts have admin  MozartSavings 0xeb79a36303aeF7f7536467025a29Df85421F31E2" time="0.2780" classname=" MozartSavings 0xeb79a36303aeF7f7536467025a29Df85421F31E2">
    </testcase>
    <testcase name="Ownable contracts contracts have admin xSUSHI-STABLEx CoreProxy 0xc3A5A0dC6241C922937c5cd90F5bACE23716AFB7" time="0.4160" classname="xSUSHI-STABLEx CoreProxy 0xc3A5A0dC6241C922937c5cd90F5bACE23716AFB7">
    </testcase>
    <testcase name="Ownable contracts contracts have admin ibETH-STABLEx CoreProxy 0x81f16E6B58738DaAA4C5D493a240cCA49C240f04" time="0.3800" classname="ibETH-STABLEx CoreProxy 0x81f16E6B58738DaAA4C5D493a240cCA49C240f04">
    </testcase>
    <testcase name="Ownable contracts contracts have admin imUSD-STABLEx CoreProxy 0x066b7660b2003793fB2ffD0b8152158c016fbfeF" time="0.3610" classname="imUSD-STABLEx CoreProxy 0x066b7660b2003793fB2ffD0b8152158c016fbfeF">
    </testcase>
    <testcase name="Ownable contracts contracts have admin Pool-6 Proxy 0x1960AFc89FF98f4eE64D29A5082EB5002b376E35" time="0.4580" classname="Pool-6 Proxy 0x1960AFc89FF98f4eE64D29A5082EB5002b376E35">
    </testcase>
    <testcase name="Ownable contracts contracts have admin Pool-6.1 Proxy 0xa85333DA5e5A48498F0a65A1A6521E0ceadD3eFD" time="0.4230" classname="Pool-6.1 Proxy 0xa85333DA5e5A48498F0a65A1A6521E0ceadD3eFD">
    </testcase>
    <testcase name="Ownable contracts contracts have admin wstETH-STABLEx CoreProxy 0xC466Ec062D554BEB42f1766488F7345261C63616" time="0.4060" classname="wstETH-STABLEx CoreProxy 0xC466Ec062D554BEB42f1766488F7345261C63616">
    </testcase>
    <testcase name="Ownable contracts contracts have admin Pool-8 Proxy 0x3043b623632fF1AC88B3a17113E39c0B964381C5" time="0.4720" classname="Pool-8 Proxy 0x3043b623632fF1AC88B3a17113E39c0B964381C5">
    </testcase>
    <testcase name="Ownable contracts contracts have admin Pool-9 Proxy 0xAb0BcA3ff56d891cC8b22A5d9705F7088cE3Bf3b" time="0.4710" classname="Pool-9 Proxy 0xAb0BcA3ff56d891cC8b22A5d9705F7088cE3Bf3b">
    </testcase>
    <testcase name="Ownable contracts contracts have admin  SapphireCreditScoreProxy 0x427d3B028fb15a06C2d75be8E8a2238aAd41ed3A" time="0.4390" classname=" SapphireCreditScoreProxy 0x427d3B028fb15a06C2d75be8E8a2238aAd41ed3A">
    </testcase>
    <testcase name="Ownable contracts contracts have admin DefiPassport DefiPassportProxy 0x933492b6B7038A7e4f14b64DEFe40463F9bc3508" time="0.4330" classname="DefiPassport DefiPassportProxy 0x933492b6B7038A7e4f14b64DEFe40463F9bc3508">
    </testcase>
    <testcase name="Ownable contracts contracts have admin StakingAccrualERC20 StakingAccrualERC20Proxy 0x9bfFAd7A6d5F52dBC51cAE33E419793C72fD7d9D" time="0.4240" classname="StakingAccrualERC20 StakingAccrualERC20Proxy 0x9bfFAd7A6d5F52dBC51cAE33E419793C72fD7d9D">
    </testcase>
    <testcase name="Ownable contracts contracts have admin  SapphirePassportScoresProxy 0x548Ab653A6aB2e54deBF05F3A728b602Ac1C2E69" time="0.4770" classname=" SapphirePassportScoresProxy 0x548Ab653A6aB2e54deBF05F3A728b602Ac1C2E69">
    </testcase>
  </testsuite>
  <testsuite name="SapphireAssessor" timestamp="2021-12-09T20:06:44" tests="0" file="/Users/gabriel/dev/contracts/test/contracts/sapphire/assesor.test.ts" time="0.0000" failures="0">
  </testsuite>
  <testsuite name="constructor" timestamp="2021-12-09T20:06:45" tests="3" file="/Users/gabriel/dev/contracts/test/contracts/sapphire/assesor.test.ts" time="0.0560" failures="0">
    <testcase name="SapphireAssessor constructor reverts if mapper and credit score are null" time="0.0210" classname="reverts if mapper and credit score are null">
    </testcase>
    <testcase name="SapphireAssessor constructor reverts if max score is 0" time="0.0060" classname="reverts if max score is 0">
    </testcase>
    <testcase name="SapphireAssessor constructor initializes the mapper and the credit score" time="0.0250" classname="initializes the mapper and the credit score">
    </testcase>
  </testsuite>
  <testsuite name="#assess" timestamp="2021-12-09T20:06:45" tests="11" file="/Users/gabriel/dev/contracts/test/contracts/sapphire/assesor.test.ts" time="0.6930" failures="0">
    <testcase name="SapphireAssessor #assess reverts if upper bound or account are empty" time="0.0210" classname="reverts if upper bound or account are empty">
    </testcase>
    <testcase name="SapphireAssessor #assess reverts if lower bound is not smaller than upper bound" time="0.0110" classname="reverts if lower bound is not smaller than upper bound">
    </testcase>
    <testcase name="SapphireAssessor #assess reverts if the mapper returns a value that is outside the lower and upper bounds" time="0.1320" classname="reverts if the mapper returns a value that is outside the lower and upper bounds">
    </testcase>
    <testcase name="SapphireAssessor #assess reverts if the proof is invalid" time="0.0180" classname="reverts if the proof is invalid">
    </testcase>
    <testcase name="SapphireAssessor #assess returns the upperBound if the user has no proof" time="0.0340" classname="returns the upperBound if the user has no proof">
    </testcase>
    <testcase name="SapphireAssessor #assess reverts if score is required and no proof is passed" time="0.0220" classname="reverts if score is required and no proof is passed">
    </testcase>
    <testcase name="SapphireAssessor #assess reverts if score is required and no proof" time="0.0610" classname="reverts if score is required and no proof">
    </testcase>
    <testcase name="SapphireAssessor #assess emit Assessed if the user has an existing score, score is required and proof is provided" time="0.0810" classname="emit Assessed if the user has an existing score, score is required and proof is provided">
    </testcase>
    <testcase name="SapphireAssessor #assess returns the lowerBound if credit score is maxed out" time="0.1350" classname="returns the lowerBound if credit score is maxed out">
    </testcase>
    <testcase name="SapphireAssessor #assess returns the upperBound if credit score is at minimum" time="0.1400" classname="returns the upperBound if credit score is at minimum">
    </testcase>
    <testcase name="SapphireAssessor #assess returns the correct value given the credit score and a valid proof" time="0.0320" classname="returns the correct value given the credit score and a valid proof">
    </testcase>
  </testsuite>
  <testsuite name="#setMapper" timestamp="2021-12-09T20:06:45" tests="5" file="/Users/gabriel/dev/contracts/test/contracts/sapphire/assesor.test.ts" time="0.0610" failures="0">
    <testcase name="SapphireAssessor #setMapper reverts if called by non-owner" time="0.0050" classname="reverts if called by non-owner">
    </testcase>
    <testcase name="SapphireAssessor #setMapper reverts if no new mapper is passed" time="0.0040" classname="reverts if no new mapper is passed">
    </testcase>
    <testcase name="SapphireAssessor #setMapper reverts if the new mapper is the same as the existing one" time="0.0030" classname="reverts if the new mapper is the same as the existing one">
    </testcase>
    <testcase name="SapphireAssessor #setMapper sets the new mapper as owner" time="0.0240" classname="sets the new mapper as owner">
    </testcase>
    <testcase name="SapphireAssessor #setMapper emits a MapperSet event" time="0.0240" classname="emits a MapperSet event">
    </testcase>
  </testsuite>
  <testsuite name="#setMaxScore" timestamp="2021-12-09T20:06:45" tests="3" file="/Users/gabriel/dev/contracts/test/contracts/sapphire/assesor.test.ts" time="0.0260" failures="0">
    <testcase name="SapphireAssessor #setMaxScore reverts if called by non-owner" time="0.0050" classname="reverts if called by non-owner">
    </testcase>
    <testcase name="SapphireAssessor #setMaxScore sets the max score" time="0.0170" classname="sets the max score">
    </testcase>
    <testcase name="SapphireAssessor #setMaxScore reverts if max score is set to 0" time="0.0040" classname="reverts if max score is set to 0">
    </testcase>
  </testsuite>
  <testsuite name="#setPassportScoreContract" timestamp="2021-12-09T20:06:45" tests="5" file="/Users/gabriel/dev/contracts/test/contracts/sapphire/assesor.test.ts" time="0.1900" failures="0">
    <testcase name="SapphireAssessor #setPassportScoreContract reverts if called by non-owner" time="0.0060" classname="reverts if called by non-owner">
    </testcase>
    <testcase name="SapphireAssessor #setPassportScoreContract reverts if new address is 0" time="0.0130" classname="reverts if new address is 0">
    </testcase>
    <testcase name="SapphireAssessor #setPassportScoreContract reverts if new address is the same as the existing one" time="0.0130" classname="reverts if new address is the same as the existing one">
    </testcase>
    <testcase name="SapphireAssessor #setPassportScoreContract sets the new credit score contract" time="0.0820" classname="sets the new credit score contract">
    </testcase>
    <testcase name="SapphireAssessor #setPassportScoreContract emits the PassportScoreContractSet event" time="0.0740" classname="emits the PassportScoreContractSet event">
    </testcase>
  </testsuite>
  <testsuite name="SapphireCore.borrow()" timestamp="2021-12-09T20:06:46" tests="20" file="/Users/gabriel/dev/contracts/test/contracts/sapphire/borrow.test.ts" time="5.3510" failures="0">
    <testcase name="SapphireCore.borrow() borrows the correct amount for collateral tokens that have other than 18 decimal places" time="0.1790" classname="borrows the correct amount for collateral tokens that have other than 18 decimal places">
    </testcase>
    <testcase name="SapphireCore.borrow() borrows with the highest c-ratio if proof is not provided" time="0.1720" classname="borrows with the highest c-ratio if proof is not provided">
    </testcase>
    <testcase name="SapphireCore.borrow() borrows with exact c-ratio" time="0.1510" classname="borrows with exact c-ratio">
    </testcase>
    <testcase name="SapphireCore.borrow() reverts if the proof protocol does not match the one registered" time="0.0070" classname="reverts if the proof protocol does not match the one registered">
    </testcase>
    <testcase name="SapphireCore.borrow() reverts if borrower cross the c-ratio" time="0.0190" classname="reverts if borrower cross the c-ratio">
    </testcase>
    <testcase name="SapphireCore.borrow() borrows more if more collateral is provided" time="0.4170" classname="borrows more if more collateral is provided">
    </testcase>
    <testcase name="SapphireCore.borrow() borrows more if a valid score proof is provided" time="0.1630" classname="borrows more if a valid score proof is provided">
    </testcase>
    <testcase name="SapphireCore.borrow() borrows more if the credit score increases" time="0.4560" classname="borrows more if the credit score increases">
    </testcase>
    <testcase name="SapphireCore.borrow() borrows less if the credit score decreases" time="0.1460" classname="borrows less if the credit score decreases">
    </testcase>
    <testcase name="SapphireCore.borrow() updates the total borrowed amount correctly" time="0.3650" classname="updates the total borrowed amount correctly">
    </testcase>
    <testcase name="SapphireCore.borrow() should not borrow if the price from the oracle is 0" time="0.0180" classname="should not borrow if the price from the oracle is 0">
    </testcase>
    <testcase name="SapphireCore.borrow() should not borrow more if the c-ratio is at the minimum" time="0.1450" classname="should not borrow more if the c-ratio is at the minimum">
    </testcase>
    <testcase name="SapphireCore.borrow() should not borrow more if the price decreases" time="0.3830" classname="should not borrow more if the price decreases">
    </testcase>
    <testcase name="SapphireCore.borrow() should not borrow if using someone else&apos;s score proof" time="0.1770" classname="should not borrow if using someone else&apos;s score proof">
    </testcase>
    <testcase name="SapphireCore.borrow() should not borrow more if more interest has accrued" time="0.2510" classname="should not borrow more if more interest has accrued">
    </testcase>
    <testcase name="SapphireCore.borrow() should not borrow less than the minimum borrow limit" time="0.0460" classname="should not borrow less than the minimum borrow limit">
    </testcase>
    <testcase name="SapphireCore.borrow() should not borrow more than the maximum amount" time="0.2100" classname="should not borrow more than the maximum amount">
    </testcase>
    <testcase name="SapphireCore.borrow() should not borrow if contract is paused" time="0.0320" classname="should not borrow if contract is paused">
    </testcase>
    <testcase name="SapphireCore.borrow() should not borrow if the collateral price is stale" time="0.0550" classname="should not borrow if the collateral price is stale">
    </testcase>
    <testcase name="SapphireCore.borrow() emits ActionsOperated event when a borrow occurs" time="0.1560" classname="emits ActionsOperated event when a borrow occurs">
    </testcase>
  </testsuite>
  <testsuite name="borrow index (integration)" timestamp="2021-12-09T20:06:51" tests="0" file="/Users/gabriel/dev/contracts/test/contracts/sapphire/borrowIndex.test.ts" time="0.0000" failures="0">
  </testsuite>
  <testsuite name="calculate the index for opening a position" timestamp="2021-12-09T20:06:52" tests="3" file="/Users/gabriel/dev/contracts/test/contracts/sapphire/borrowIndex.test.ts" time="1.4770" failures="0">
    <testcase name="borrow index (integration) calculate the index for opening a position for one year" time="0.2560" classname="for one year">
    </testcase>
    <testcase name="borrow index (integration) calculate the index for opening a position for one and half years" time="0.2590" classname="for one and half years">
    </testcase>
    <testcase name="borrow index (integration) calculate the index for opening a position for two years" time="0.9570" classname="for two years">
    </testcase>
  </testsuite>
  <testsuite name="calculate the index for opening two positions" timestamp="2021-12-09T20:06:53" tests="3" file="/Users/gabriel/dev/contracts/test/contracts/sapphire/borrowIndex.test.ts" time="1.5270" failures="0">
    <testcase name="borrow index (integration) calculate the index for opening two positions the first for one year, the second for half a year" time="0.5120" classname="the first for one year, the second for half a year">
    </testcase>
    <testcase name="borrow index (integration) calculate the index for opening two positions the first for one and a half years, the second for 3 months" time="0.4810" classname="the first for one and a half years, the second for 3 months">
    </testcase>
    <testcase name="borrow index (integration) calculate the index for opening two positions the first for two years, the second for one and half years" time="0.5290" classname="the first for two years, the second for one and half years">
    </testcase>
  </testsuite>
  <testsuite name="calculate the index for 2 years for opening and updating a position" timestamp="2021-12-09T20:06:55" tests="4" file="/Users/gabriel/dev/contracts/test/contracts/sapphire/borrowIndex.test.ts" time="1.5090" failures="0">
    <testcase name="borrow index (integration) calculate the index for 2 years for opening and updating a position open for 1 year and borrow more after this year" time="0.5090" classname="open for 1 year and borrow more after this year">
    </testcase>
    <testcase name="borrow index (integration) calculate the index for 2 years for opening and updating a position open for 1 year and repay partially after this year" time="0.4960" classname="open for 1 year and repay partially after this year">
    </testcase>
    <testcase name="borrow index (integration) calculate the index for 2 years for opening and updating a position open for 1 year and repay fully after this year" time="0.4980" classname="open for 1 year and repay fully after this year">
    </testcase>
  </testsuite>
  <testsuite name="Scenarios" timestamp="2021-12-09T20:06:56" tests="6" file="/Users/gabriel/dev/contracts/test/contracts/sapphire/borrowIndex.test.ts" time="3.0220" failures="0">
    <testcase name="borrow index (integration) Scenarios calculates the interest amount correctly for one user" time="1.8810" classname="calculates the interest amount correctly for one user">
    </testcase>
    <testcase name="borrow index (integration) Scenarios calculates the interest amount correctly for two users when a repayment happens in between" time="1.1310" classname="calculates the interest amount correctly for two users when a repayment happens in between">
    </testcase>
  </testsuite>
  <testsuite name="SapphireCore.deposit()" timestamp="2021-12-09T20:06:59" tests="5" file="/Users/gabriel/dev/contracts/test/contracts/sapphire/deposit.test.ts" time="0.9910" failures="0">
    <testcase name="SapphireCore.deposit() reverts if the contract is paused" time="0.0390" classname="reverts if the contract is paused">
    </testcase>
    <testcase name="SapphireCore.deposit() reverts if the user doesn&apos;t have enough funds" time="0.0120" classname="reverts if the user doesn&apos;t have enough funds">
    </testcase>
    <testcase name="SapphireCore.deposit() deposit without credit score" time="0.1020" classname="deposit without credit score">
    </testcase>
    <testcase name="SapphireCore.deposit() deposit with credit score" time="0.1250" classname="deposit with credit score">
    </testcase>
    <testcase name="SapphireCore.deposit() emits the ActionsOperated event" time="0.1160" classname="emits the ActionsOperated event">
    </testcase>
  </testsuite>
  <testsuite name="SapphireCore.exit()" timestamp="2021-12-09T20:07:00" tests="3" file="/Users/gabriel/dev/contracts/test/contracts/sapphire/exit.test.ts" time="1.8690" failures="0">
    <testcase name="SapphireCore.exit() reverts if user does not have enough balance to close his vault" time="0.3010" classname="reverts if user does not have enough balance to close his vault">
    </testcase>
    <testcase name="SapphireCore.exit() repays all the debt and returns collateral to the user" time="0.4280" classname="repays all the debt and returns collateral to the user">
    </testcase>
    <testcase name="SapphireCore.exit() repays all the debt + accrued interest and returns collateral to the user" time="0.5710" classname="repays all the debt + accrued interest and returns collateral to the user">
    </testcase>
  </testsuite>
  <testsuite name="SapphireCore.init" timestamp="2021-12-09T20:07:02" tests="10" file="/Users/gabriel/dev/contracts/test/contracts/sapphire/init.test.ts" time="10.5770" failures="0">
    <testcase name="SapphireCore.init reverts if collateral address is 0" time="0.0350" classname="reverts if collateral address is 0">
    </testcase>
    <testcase name="SapphireCore.init reverts if synthetic address is 0" time="0.0300" classname="reverts if synthetic address is 0">
    </testcase>
    <testcase name="SapphireCore.init reverts if low c-ratio is 0" time="0.0550" classname="reverts if low c-ratio is 0">
    </testcase>
    <testcase name="SapphireCore.init reverts if high c-ratio is 0" time="0.0420" classname="reverts if high c-ratio is 0">
    </testcase>
    <testcase name="SapphireCore.init reverts high c-ratio is lower than the low c-ratio" time="0.0510" classname="reverts high c-ratio is lower than the low c-ratio">
    </testcase>
    <testcase name="SapphireCore.init reverts if liquidation user fee is 0" time="0.0450" classname="reverts if liquidation user fee is 0">
    </testcase>
    <testcase name="SapphireCore.init sets all the passed parameters" time="0.8420" classname="sets all the passed parameters">
    </testcase>
    <testcase name="SapphireCore.init revert if owner inits twice " time="0.1470" classname="revert if owner inits twice ">
    </testcase>
    <testcase name="SapphireCore.init unauthorized cannot initialize" time="0.0290" classname="unauthorized cannot initialize">
    </testcase>
  </testsuite>
  <testsuite name="SapphireCore.liquidate()" timestamp="2021-12-09T20:07:13" tests="0" file="/Users/gabriel/dev/contracts/test/contracts/sapphire/liquidate.test.ts" time="0.0000" failures="0">
  </testsuite>
  <testsuite name="Base tests" timestamp="2021-12-09T20:07:14" tests="15" file="/Users/gabriel/dev/contracts/test/contracts/sapphire/liquidate.test.ts" time="4.8560" failures="0">
    <testcase name="SapphireCore.liquidate() Base tests liquidates an undercollateralized vault" time="0.4700" classname="liquidates an undercollateralized vault">
    </testcase>
    <testcase name="SapphireCore.liquidate() Base tests provides a lower score proof and then liquidates the vault" time="0.5560" classname="provides a lower score proof and then liquidates the vault">
    </testcase>
    <testcase name="SapphireCore.liquidate() Base tests liquidates again if the price drops" time="0.8480" classname="liquidates again if the price drops">
    </testcase>
    <testcase name="SapphireCore.liquidate() Base tests reverts if proof is not for the correct protocol" time="0.3260" classname="reverts if proof is not for the correct protocol">
    </testcase>
    <testcase name="SapphireCore.liquidate() Base tests should not liquidate if proof is not provided" time="0.2110" classname="should not liquidate if proof is not provided">
    </testcase>
    <testcase name="SapphireCore.liquidate() Base tests should not liquidate a collateralized vault " time="0.2190" classname="should not liquidate a collateralized vault ">
    </testcase>
    <testcase name="SapphireCore.liquidate() Base tests should not liquidate if liquidator provides a score proof that is not the owner&apos;s" time="0.3500" classname="should not liquidate if liquidator provides a score proof that is not the owner&apos;s">
    </testcase>
    <testcase name="SapphireCore.liquidate() Base tests should not liquidate if the credit score improved such that vault is immune to liquidations" time="0.4860" classname="should not liquidate if the credit score improved such that vault is immune to liquidations">
    </testcase>
    <testcase name="SapphireCore.liquidate() Base tests should not liquidate without enough debt" time="0.2340" classname="should not liquidate without enough debt">
    </testcase>
    <testcase name="SapphireCore.liquidate() Base tests should not liquidate if the price increases" time="0.2190" classname="should not liquidate if the price increases">
    </testcase>
    <testcase name="SapphireCore.liquidate() Base tests should not liquidate twice in a row" time="0.4520" classname="should not liquidate twice in a row">
    </testcase>
    <testcase name="SapphireCore.liquidate() Base tests should not liquidate if contract is paused" time="0.2230" classname="should not liquidate if contract is paused">
    </testcase>
    <testcase name="SapphireCore.liquidate() Base tests should not liquidate if the collateral price is stale" time="0.2450" classname="should not liquidate if the collateral price is stale">
    </testcase>
  </testsuite>
  <testsuite name="Scenarios" timestamp="2021-12-09T20:07:18" tests="4" file="/Users/gabriel/dev/contracts/test/contracts/sapphire/liquidate.test.ts" time="6.4730" failures="0">
    <testcase name="SapphireCore.liquidate() Scenarios Scenario 1: the vault gets liquidated because the collateral price hits the liquidation price" time="1.5910" classname="Scenario 1: the vault gets liquidated because the collateral price hits the liquidation price">
    </testcase>
    <testcase name="SapphireCore.liquidate() Scenarios Scenario 2: The borrow amount is greater than the collateral value and a liquidation occurs" time="2.3120" classname="Scenario 2: The borrow amount is greater than the collateral value and a liquidation occurs">
    </testcase>
    <testcase name="SapphireCore.liquidate() Scenarios Scenario 3: the user changes their vault, then their credit score decreases and liquidation occurs" time="1.0700" classname="Scenario 3: the user changes their vault, then their credit score decreases and liquidation occurs">
    </testcase>
    <testcase name="SapphireCore.liquidate() Scenarios Scenario 4: the user changes their vault, then their credit score increases which protects him from liquidation. Then the price drops and gets liquidated" time="1.4430" classname="Scenario 4: the user changes their vault, then their credit score increases which protects him from liquidation. Then the price drops and gets liquidated">
    </testcase>
  </testsuite>
  <testsuite name="SapphireMapperLinear" timestamp="2021-12-09T20:07:25" tests="7" file="/Users/gabriel/dev/contracts/test/contracts/sapphire/mapper.test.ts" time="0.1760" failures="0">
    <testcase name="SapphireMapperLinear reverts if scoreMax or upperbound are 0" time="0.0290" classname="reverts if scoreMax or upperbound are 0">
    </testcase>
    <testcase name="SapphireMapperLinear reverts if the lower bound and the upper bound are equal" time="0.0030" classname="reverts if the lower bound and the upper bound are equal">
    </testcase>
    <testcase name="SapphireMapperLinear reverts if the upper bound is smaller than the lower bound" time="0.0020" classname="reverts if the upper bound is smaller than the lower bound">
    </testcase>
    <testcase name="SapphireMapperLinear reverts if score is bigger than the maximum score" time="0.0030" classname="reverts if score is bigger than the maximum score">
    </testcase>
    <testcase name="SapphireMapperLinear returns the lower bound if score is max" time="0.0040" classname="returns the lower bound if score is max">
    </testcase>
    <testcase name="SapphireMapperLinear returns the upper bound if score is min" time="0.0030" classname="returns the upper bound if score is min">
    </testcase>
    <testcase name="SapphireMapperLinear returns a correct score mapping" time="0.0090" classname="returns a correct score mapping">
    </testcase>
  </testsuite>
  <testsuite name="SapphireCore.open()" timestamp="2021-12-09T20:07:25" tests="0" file="/Users/gabriel/dev/contracts/test/contracts/sapphire/open.test.ts" time="0.0000" failures="0">
  </testsuite>
  <testsuite name="without score proof" timestamp="2021-12-09T20:07:26" tests="5" file="/Users/gabriel/dev/contracts/test/contracts/sapphire/open.test.ts" time="0.4830" failures="0">
    <testcase name="SapphireCore.open() without score proof open at the exact c-ratio" time="0.1850" classname="open at the exact c-ratio">
    </testcase>
    <testcase name="SapphireCore.open() without score proof open above the c-ratio" time="0.1790" classname="open above the c-ratio">
    </testcase>
    <testcase name="SapphireCore.open() without score proof revert if opened below the c-ratio" time="0.0280" classname="revert if opened below the c-ratio">
    </testcase>
    <testcase name="SapphireCore.open() without score proof revert if opened below the minimum position amount" time="0.0450" classname="revert if opened below the minimum position amount">
    </testcase>
    <testcase name="SapphireCore.open() without score proof revert if opened above the maximum borrowed amount" time="0.0410" classname="revert if opened above the maximum borrowed amount">
    </testcase>
  </testsuite>
  <testsuite name="with score proof" timestamp="2021-12-09T20:07:26" tests="8" file="/Users/gabriel/dev/contracts/test/contracts/sapphire/open.test.ts" time="1.2650" failures="0">
    <testcase name="SapphireCore.open() with score proof open at the exact default c-ratio" time="0.2170" classname="open at the exact default c-ratio">
    </testcase>
    <testcase name="SapphireCore.open() with score proof open above the default c-ratio" time="0.2040" classname="open above the default c-ratio">
    </testcase>
    <testcase name="SapphireCore.open() with score proof open below the default c-ratio, but above c-ratio based on credit score" time="0.2160" classname="open below the default c-ratio, but above c-ratio based on credit score">
    </testcase>
    <testcase name="SapphireCore.open() with score proof open at the c-ratio based on credit score" time="0.2300" classname="open at the c-ratio based on credit score">
    </testcase>
    <testcase name="SapphireCore.open() with score proof revert if opened below c-ratio based on credit score" time="0.0170" classname="revert if opened below c-ratio based on credit score">
    </testcase>
    <testcase name="SapphireCore.open() with score proof revert if opened below the minimum position amount" time="0.0380" classname="revert if opened below the minimum position amount">
    </testcase>
    <testcase name="SapphireCore.open() with score proof revert if opened above the maximum borrowed amount" time="0.0550" classname="revert if opened above the maximum borrowed amount">
    </testcase>
    <testcase name="SapphireCore.open() with score proof revert if opened above the total maximum borrowed amount" time="0.2800" classname="revert if opened above the total maximum borrowed amount">
    </testcase>
  </testsuite>
  <testsuite name="PassportScoreVerifiable" timestamp="2021-12-09T20:07:28" tests="0" file="/Users/gabriel/dev/contracts/test/contracts/sapphire/passportScoreVerifiable.test.ts" time="0.0000" failures="0">
  </testsuite>
  <testsuite name="#checkScoreProof" timestamp="2021-12-09T20:07:28" tests="4" file="/Users/gabriel/dev/contracts/test/contracts/sapphire/passportScoreVerifiable.test.ts" time="0.0430" failures="0">
    <testcase name="PassportScoreVerifiable #checkScoreProof reverts if score &gt; 0 and proof is not passed" time="0.0070" classname="reverts if score &gt; 0 and proof is not passed">
    </testcase>
    <testcase name="PassportScoreVerifiable #checkScoreProof reverts if the proof is not the caller&apos;s and _enforceSameCaller is true" time="0.0050" classname="reverts if the proof is not the caller&apos;s and _enforceSameCaller is true">
    </testcase>
    <testcase name="PassportScoreVerifiable #checkScoreProof does not revert if proof is not required and score is 0" time="0.0130" classname="does not revert if proof is not required and score is 0">
    </testcase>
    <testcase name="PassportScoreVerifiable #checkScoreProof does not revert if proof is required and is valid" time="0.0150" classname="does not revert if proof is required and is valid">
    </testcase>
  </testsuite>
  <testsuite name="SapphireCore.repay()" timestamp="2021-12-09T20:07:28" tests="10" file="/Users/gabriel/dev/contracts/test/contracts/sapphire/repay.test.ts" time="2.9390" failures="0">
    <testcase name="SapphireCore.repay() repays to increase the c-ratio" time="0.1670" classname="repays to increase the c-ratio">
    </testcase>
    <testcase name="SapphireCore.repay() repays to make the position collateralized" time="0.1770" classname="repays to make the position collateralized">
    </testcase>
    <testcase name="SapphireCore.repay() repays without a score proof even if one exists on-chain" time="0.3420" classname="repays without a score proof even if one exists on-chain">
    </testcase>
    <testcase name="SapphireCore.repay() updates the totalBorrowed after a repay" time="0.1660" classname="updates the totalBorrowed after a repay">
    </testcase>
    <testcase name="SapphireCore.repay() updates the vault borrow amount" time="0.8310" classname="updates the vault borrow amount">
    </testcase>
    <testcase name="SapphireCore.repay() emits ActionsOperated event when a repay happens" time="0.2880" classname="emits ActionsOperated event when a repay happens">
    </testcase>
    <testcase name="SapphireCore.repay() should not repay if user did not approve" time="0.0160" classname="should not repay if user did not approve">
    </testcase>
    <testcase name="SapphireCore.repay() should not repay to a vault that does not exist" time="0.0630" classname="should not repay to a vault that does not exist">
    </testcase>
    <testcase name="SapphireCore.repay() should not repay more than the vault&apos;s debt" time="0.0660" classname="should not repay more than the vault&apos;s debt">
    </testcase>
    <testcase name="SapphireCore.repay() should not repay if contract is paused" time="0.0540" classname="should not repay if contract is paused">
    </testcase>
  </testsuite>
  <testsuite name="SapphireCreditScore" timestamp="2021-12-09T20:07:31" tests="0" file="/Users/gabriel/dev/contracts/test/contracts/sapphire/sapphirePassportScores.test.ts" time="0.0000" failures="0">
  </testsuite>
  <testsuite name="#init" timestamp="2021-12-09T20:07:32" tests="1" file="/Users/gabriel/dev/contracts/test/contracts/sapphire/sapphirePassportScores.test.ts" time="0.0670" failures="0">
    <testcase name="SapphireCreditScore #init sets the initial values" time="0.0640" classname="sets the initial values">
    </testcase>
  </testsuite>
  <testsuite name="#setPause" timestamp="2021-12-09T20:07:32" tests="4" file="/Users/gabriel/dev/contracts/test/contracts/sapphire/sapphirePassportScores.test.ts" time="0.1060" failures="0">
    <testcase name="SapphireCreditScore #setPause initially not active" time="0.0550" classname="initially not active">
    </testcase>
    <testcase name="SapphireCreditScore #setPause revert if trying to pause as an unauthorised user" time="0.0070" classname="revert if trying to pause as an unauthorised user">
    </testcase>
    <testcase name="SapphireCreditScore #setPause revert if set pause as merkle root updater" time="0.0050" classname="revert if set pause as merkle root updater">
    </testcase>
    <testcase name="SapphireCreditScore #setPause set pause as pause operator" time="0.0350" classname="set pause as pause operator">
    </testcase>
  </testsuite>
  <testsuite name="#updateMerkleRoot" timestamp="2021-12-09T20:07:32" tests="12" file="/Users/gabriel/dev/contracts/test/contracts/sapphire/sapphirePassportScores.test.ts" time="0.7880" failures="0">
    <testcase name="SapphireCreditScore #updateMerkleRoot should have merkle root updater not equal admin" time="0.0030" classname="should have merkle root updater not equal admin">
    </testcase>
    <testcase name="SapphireCreditScore #updateMerkleRoot should not be able to update the merkle root as an unauthorised user" time="0.0070" classname="should not be able to update the merkle root as an unauthorised user">
    </testcase>
    <testcase name="SapphireCreditScore #updateMerkleRoot should not be able to be called by the root updater before the delay duration" time="0.0630" classname="should not be able to be called by the root updater before the delay duration">
    </testcase>
    <testcase name="SapphireCreditScore #updateMerkleRoot should not be able to post an empty root" time="0.0030" classname="should not be able to post an empty root">
    </testcase>
    <testcase name="SapphireCreditScore #updateMerkleRoot should not be able to update as admin if the contract is not paused" time="0.0040" classname="should not be able to update as admin if the contract is not paused">
    </testcase>
    <testcase name="SapphireCreditScore #updateMerkleRoot instantly update merkle root as the admin" time="0.0630" classname="instantly update merkle root as the admin">
    </testcase>
    <testcase name="SapphireCreditScore #updateMerkleRoot instantly update merkle root avoiding time delay as the admin" time="0.0710" classname="instantly update merkle root avoiding time delay as the admin">
    </testcase>
    <testcase name="SapphireCreditScore #updateMerkleRoot should be able to update the merkle root as the root updater" time="0.0540" classname="should be able to update the merkle root as the root updater">
    </testcase>
    <testcase name="SapphireCreditScore #updateMerkleRoot should increment the current epoch when updating as the root updater" time="0.0550" classname="should increment the current epoch when updating as the root updater">
    </testcase>
    <testcase name="SapphireCreditScore #updateMerkleRoot should ensure that malicious merkle root does not became a current one" time="0.1300" classname="should ensure that malicious merkle root does not became a current one">
    </testcase>
    <testcase name="SapphireCreditScore #updateMerkleRoot should check if updater cannot update Merkle root before the delay duration passes" time="0.2050" classname="should check if updater cannot update Merkle root before the delay duration passes">
    </testcase>
    <testcase name="SapphireCreditScore #updateMerkleRoot saves the merkle root to the rootHistory mapping" time="0.1140" classname="saves the merkle root to the rootHistory mapping">
    </testcase>
  </testsuite>
  <testsuite name="#verify" timestamp="2021-12-09T20:07:33" tests="3" file="/Users/gabriel/dev/contracts/test/contracts/sapphire/sapphirePassportScores.test.ts" time="0.0190" failures="0">
    <testcase name="SapphireCreditScore #verify should be able to verify a user&apos;s score for the specified protocol" time="0.0050" classname="should be able to verify a user&apos;s score for the specified protocol">
    </testcase>
    <testcase name="SapphireCreditScore #verify reverts if proof is invalid" time="0.0050" classname="reverts if proof is invalid">
    </testcase>
    <testcase name="SapphireCreditScore #verify reverts if protocol does not exist" time="0.0050" classname="reverts if protocol does not exist">
    </testcase>
  </testsuite>
  <testsuite name="#verifyForEpoch" timestamp="2021-12-09T20:07:33" tests="3" file="/Users/gabriel/dev/contracts/test/contracts/sapphire/sapphirePassportScores.test.ts" time="0.5480" failures="0">
    <testcase name="SapphireCreditScore #verifyForEpoch verifies a user&apos;s score for the specified protocol and epoch" time="0.0060" classname="verifies a user&apos;s score for the specified protocol and epoch">
    </testcase>
    <testcase name="SapphireCreditScore #verifyForEpoch reverts if proof is invalid" time="0.0040" classname="reverts if proof is invalid">
    </testcase>
    <testcase name="SapphireCreditScore #verifyForEpoch reverts if epoch is in the future" time="0.0020" classname="reverts if epoch is in the future">
    </testcase>
  </testsuite>
  <testsuite name="#setMerkleRootUpdater" timestamp="2021-12-09T20:07:33" tests="2" file="/Users/gabriel/dev/contracts/test/contracts/sapphire/sapphirePassportScores.test.ts" time="0.0370" failures="0">
    <testcase name="SapphireCreditScore #setMerkleRootUpdater should be able to update as the admin" time="0.0310" classname="should be able to update as the admin">
    </testcase>
    <testcase name="SapphireCreditScore #setMerkleRootUpdater should not be able to update as non-admin" time="0.0050" classname="should not be able to update as non-admin">
    </testcase>
  </testsuite>
  <testsuite name="#setPauseOperator" timestamp="2021-12-09T20:07:33" tests="2" file="/Users/gabriel/dev/contracts/test/contracts/sapphire/sapphirePassportScores.test.ts" time="0.0270" failures="0">
    <testcase name="SapphireCreditScore #setPauseOperator should be able to update as the admin" time="0.0230" classname="should be able to update as the admin">
    </testcase>
    <testcase name="SapphireCreditScore #setPauseOperator should not be able to update as non-admin" time="0.0030" classname="should not be able to update as non-admin">
    </testcase>
  </testsuite>
  <testsuite name="#setMerkleRootDelay" timestamp="2021-12-09T20:07:33" tests="2" file="/Users/gabriel/dev/contracts/test/contracts/sapphire/sapphirePassportScores.test.ts" time="0.0270" failures="0">
    <testcase name="SapphireCreditScore #setMerkleRootDelay should be able to update as the admin" time="0.0220" classname="should be able to update as the admin">
    </testcase>
    <testcase name="SapphireCreditScore #setMerkleRootDelay should not be able to update as non-admin" time="0.0040" classname="should not be able to update as non-admin">
    </testcase>
  </testsuite>
  <testsuite name="#setCurrentEpoch" timestamp="2021-12-09T20:07:33" tests="4" file="/Users/gabriel/dev/contracts/test/contracts/sapphire/sapphirePassportScores.test.ts" time="0.2380" failures="0">
    <testcase name="SapphireCreditScore #setCurrentEpoch reverts if called by non-admin" time="0.0330" classname="reverts if called by non-admin">
    </testcase>
    <testcase name="SapphireCreditScore #setCurrentEpoch reverts if not paused" time="0.0040" classname="reverts if not paused">
    </testcase>
    <testcase name="SapphireCreditScore #setCurrentEpoch reverts if setting a smaller or equal epoch" time="0.0320" classname="reverts if setting a smaller or equal epoch">
    </testcase>
    <testcase name="SapphireCreditScore #setCurrentEpoch sets the epoch if called by the admin" time="0.1520" classname="sets the epoch if called by the admin">
    </testcase>
  </testsuite>
  <testsuite name="SapphireCore.setters" timestamp="2021-12-09T20:07:33" tests="0" file="/Users/gabriel/dev/contracts/test/contracts/sapphire/setters.test.ts" time="0.0000" failures="0">
  </testsuite>
  <testsuite name="#setCollateralRatios" timestamp="2021-12-09T20:07:34" tests="6" file="/Users/gabriel/dev/contracts/test/contracts/sapphire/setters.test.ts" time="0.0780" failures="0">
    <testcase name="SapphireCore.setters #setCollateralRatios reverts if called by non-owner" time="0.0080" classname="reverts if called by non-owner">
    </testcase>
    <testcase name="SapphireCore.setters #setCollateralRatios reverts if low c-ratio is 0" time="0.0040" classname="reverts if low c-ratio is 0">
    </testcase>
    <testcase name="SapphireCore.setters #setCollateralRatios reverts if low c-ratio is 0.999..99" time="0.0040" classname="reverts if low c-ratio is 0.999..99">
    </testcase>
    <testcase name="SapphireCore.setters #setCollateralRatios reverts if high c-ratio is 0" time="0.0100" classname="reverts if high c-ratio is 0">
    </testcase>
    <testcase name="SapphireCore.setters #setCollateralRatios reverts if high c-ratio is lower than the low c-ratio" time="0.0040" classname="reverts if high c-ratio is lower than the low c-ratio">
    </testcase>
    <testcase name="SapphireCore.setters #setCollateralRatios sets the low and high collateral ratios" time="0.0400" classname="sets the low and high collateral ratios">
    </testcase>
  </testsuite>
  <testsuite name="#setAssessor" timestamp="2021-12-09T20:07:34" tests="2" file="/Users/gabriel/dev/contracts/test/contracts/sapphire/setters.test.ts" time="0.0530" failures="0">
    <testcase name="SapphireCore.setters #setAssessor reverts if called by non-owner" time="0.0090" classname="reverts if called by non-owner">
    </testcase>
    <testcase name="SapphireCore.setters #setAssessor sets the assessor address" time="0.0280" classname="sets the assessor address">
    </testcase>
  </testsuite>
  <testsuite name="#setFeeCollector" timestamp="2021-12-09T20:07:34" tests="2" file="/Users/gabriel/dev/contracts/test/contracts/sapphire/setters.test.ts" time="0.0410" failures="0">
    <testcase name="SapphireCore.setters #setFeeCollector reverts if called by non-admin" time="0.0070" classname="reverts if called by non-admin">
    </testcase>
    <testcase name="SapphireCore.setters #setFeeCollector sets the fee collector address" time="0.0310" classname="sets the fee collector address">
    </testcase>
  </testsuite>
  <testsuite name="#setPauseOperator" timestamp="2021-12-09T20:07:34" tests="2" file="/Users/gabriel/dev/contracts/test/contracts/sapphire/setters.test.ts" time="0.0330" failures="0">
    <testcase name="SapphireCore.setters #setPauseOperator reverts if called by non-admin" time="0.0050" classname="reverts if called by non-admin">
    </testcase>
    <testcase name="SapphireCore.setters #setPauseOperator sets the pause operator" time="0.0260" classname="sets the pause operator">
    </testcase>
  </testsuite>
  <testsuite name="#setPause" timestamp="2021-12-09T20:07:34" tests="2" file="/Users/gabriel/dev/contracts/test/contracts/sapphire/setters.test.ts" time="0.0690" failures="0">
    <testcase name="SapphireCore.setters #setPause reverts if called by non-pauseOperator" time="0.0050" classname="reverts if called by non-pauseOperator">
    </testcase>
    <testcase name="SapphireCore.setters #setPause pauses and un-pauses the contract" time="0.0620" classname="pauses and un-pauses the contract">
    </testcase>
  </testsuite>
  <testsuite name="#setOracle" timestamp="2021-12-09T20:07:34" tests="2" file="/Users/gabriel/dev/contracts/test/contracts/sapphire/setters.test.ts" time="0.0630" failures="0">
    <testcase name="SapphireCore.setters #setOracle reverts if called by non-owner" time="0.0080" classname="reverts if called by non-owner">
    </testcase>
    <testcase name="SapphireCore.setters #setOracle sets the oracle" time="0.0270" classname="sets the oracle">
    </testcase>
  </testsuite>
  <testsuite name="#setInterestSetter" timestamp="2021-12-09T20:07:34" tests="2" file="/Users/gabriel/dev/contracts/test/contracts/sapphire/setters.test.ts" time="0.0390" failures="0">
    <testcase name="SapphireCore.setters #setInterestSetter reverts if called by non-owner" time="0.0050" classname="reverts if called by non-owner">
    </testcase>
    <testcase name="SapphireCore.setters #setInterestSetter sets the interest setter" time="0.0310" classname="sets the interest setter">
    </testcase>
  </testsuite>
  <testsuite name="#setInterestRate" timestamp="2021-12-09T20:07:34" tests="4" file="/Users/gabriel/dev/contracts/test/contracts/sapphire/setters.test.ts" time="0.0480" failures="0">
    <testcase name="SapphireCore.setters #setInterestRate reverts if called by unauthorized" time="0.0050" classname="reverts if called by unauthorized">
    </testcase>
    <testcase name="SapphireCore.setters #setInterestRate reverts if called by owner" time="0.0090" classname="reverts if called by owner">
    </testcase>
    <testcase name="SapphireCore.setters #setInterestRate sets the interest setter" time="0.0040" classname="sets the interest setter">
    </testcase>
    <testcase name="SapphireCore.setters #setInterestRate sets the interest setter" time="0.0270" classname="sets the interest setter">
    </testcase>
  </testsuite>
  <testsuite name="#setFees" timestamp="2021-12-09T20:07:34" tests="2" file="/Users/gabriel/dev/contracts/test/contracts/sapphire/setters.test.ts" time="0.0410" failures="0">
    <testcase name="SapphireCore.setters #setFees reverts if called by non-owner" time="0.0040" classname="reverts if called by non-owner">
    </testcase>
    <testcase name="SapphireCore.setters #setFees sets the liquidation fee and the arc ratio" time="0.0340" classname="sets the liquidation fee and the arc ratio">
    </testcase>
  </testsuite>
  <testsuite name="#setLimits" timestamp="2021-12-09T20:07:34" tests="3" file="/Users/gabriel/dev/contracts/test/contracts/sapphire/setters.test.ts" time="0.0560" failures="0">
    <testcase name="SapphireCore.setters #setLimits reverts if called by non-owner" time="0.0130" classname="reverts if called by non-owner">
    </testcase>
    <testcase name="SapphireCore.setters #setLimits reverts if max limit is lower than the min limit" time="0.0090" classname="reverts if max limit is lower than the min limit">
    </testcase>
    <testcase name="SapphireCore.setters #setLimits sets the borrow limits" time="0.0300" classname="sets the borrow limits">
    </testcase>
  </testsuite>
  <testsuite name="#setProofProtocol" timestamp="2021-12-09T20:07:34" tests="2" file="/Users/gabriel/dev/contracts/test/contracts/sapphire/setters.test.ts" time="0.0570" failures="0">
    <testcase name="SapphireCore.setters #setProofProtocol reverts if called by non-owner" time="0.0040" classname="reverts if called by non-owner">
    </testcase>
    <testcase name="SapphireCore.setters #setProofProtocol sets the proof protocol" time="0.0490" classname="sets the proof protocol">
    </testcase>
  </testsuite>
  <testsuite name="SapphireCore.withdraw()" timestamp="2021-12-09T20:07:34" tests="10" file="/Users/gabriel/dev/contracts/test/contracts/sapphire/withdraw.test.ts" time="3.3290" failures="0">
    <testcase name="SapphireCore.withdraw() withdraws the entire collateral amount if no debt is minted" time="0.1960" classname="withdraws the entire collateral amount if no debt is minted">
    </testcase>
    <testcase name="SapphireCore.withdraw() withdraws to the limit" time="0.3040" classname="withdraws to the limit">
    </testcase>
    <testcase name="SapphireCore.withdraw() withdraws more collateral with a valid score proof" time="0.4750" classname="withdraws more collateral with a valid score proof">
    </testcase>
    <testcase name="SapphireCore.withdraw() withdraws the correct amount of collateral, given that collateral has a different number of decimals than 18" time="0.1910" classname="withdraws the correct amount of collateral, given that collateral has a different number of decimals than 18">
    </testcase>
    <testcase name="SapphireCore.withdraw() updates the totalCollateral amount after a withdraw" time="0.3270" classname="updates the totalCollateral amount after a withdraw">
    </testcase>
    <testcase name="SapphireCore.withdraw() reverts if the resulting vault ends up below the minimum c-ratio" time="0.3190" classname="reverts if the resulting vault ends up below the minimum c-ratio">
    </testcase>
    <testcase name="SapphireCore.withdraw() reverts if the score proof is not the caller&apos;s" time="0.4080" classname="reverts if the score proof is not the caller&apos;s">
    </testcase>
    <testcase name="SapphireCore.withdraw() reverts if vault is undercollateralized" time="0.2240" classname="reverts if vault is undercollateralized">
    </testcase>
    <testcase name="SapphireCore.withdraw() reverts if withdrawing more collateral than the amount in the vault" time="0.1110" classname="reverts if withdrawing more collateral than the amount in the vault">
    </testcase>
    <testcase name="SapphireCore.withdraw() reverts if contract is paused" time="0.2460" classname="reverts if contract is paused">
    </testcase>
  </testsuite>
  <testsuite name="Distribution" timestamp="2021-12-09T20:07:38" tests="4" file="/Users/gabriel/dev/contracts/test/contracts/staking/addressAccrual.test.ts" time="1.2820" failures="0">
    <testcase name="Distribution should be able to increase shares" time="0.1940" classname="should be able to increase shares">
    </testcase>
    <testcase name="Distribution should be able to decrease shares" time="0.0120" classname="should be able to decrease shares">
    </testcase>
    <testcase name="Distribution should be able to claim" time="0.1540" classname="should be able to claim">
    </testcase>
    <testcase name="Distribution should not be able to claim more than possible" time="0.1450" classname="should not be able to claim more than possible">
    </testcase>
  </testsuite>
  <testsuite name="JointPassportCampaign" timestamp="2021-12-09T20:07:39" tests="0" file="/Users/gabriel/dev/contracts/test/contracts/staking/jointPassportCampaign.test.ts" time="0.0000" failures="0">
  </testsuite>
  <testsuite name="#constructor" timestamp="2021-12-09T20:07:40" tests="2" file="/Users/gabriel/dev/contracts/test/contracts/staking/jointPassportCampaign.test.ts" time="0.0650" failures="0">
    <testcase name="JointPassportCampaign #constructor reverts if the variables are null" time="0.0120" classname="reverts if the variables are null">
    </testcase>
    <testcase name="JointPassportCampaign #constructor initializes the variables correctly" time="0.0480" classname="initializes the variables correctly">
    </testcase>
  </testsuite>
  <testsuite name="View functions" timestamp="2021-12-09T20:07:40" tests="0" file="/Users/gabriel/dev/contracts/test/contracts/staking/jointPassportCampaign.test.ts" time="0.0000" failures="0">
  </testsuite>
  <testsuite name="#totalSupply" timestamp="2021-12-09T20:07:40" tests="1" file="/Users/gabriel/dev/contracts/test/contracts/staking/jointPassportCampaign.test.ts" time="0.4370" failures="0">
    <testcase name="JointPassportCampaign View functions #totalSupply should return the correct amount of staking tokens" time="0.4360" classname="should return the correct amount of staking tokens">
    </testcase>
  </testsuite>
  <testsuite name="#balanceOf" timestamp="2021-12-09T20:07:40" tests="2" file="/Users/gabriel/dev/contracts/test/contracts/staking/jointPassportCampaign.test.ts" time="0.3970" failures="0">
    <testcase name="JointPassportCampaign View functions #balanceOf should return 0 if user did not stake" time="0.0020" classname="should return 0 if user did not stake">
    </testcase>
    <testcase name="JointPassportCampaign View functions #balanceOf should return the correct balance after staking" time="0.1510" classname="should return the correct balance after staking">
    </testcase>
  </testsuite>
  <testsuite name="#lastTimeRewardApplicable" timestamp="2021-12-09T20:07:41" tests="4" file="/Users/gabriel/dev/contracts/test/contracts/staking/jointPassportCampaign.test.ts" time="0.7940" failures="0">
    <testcase name="JointPassportCampaign View functions #lastTimeRewardApplicable arc: should return the block timestamp if called after the collab reward period but before the arc reward period" time="0.0770" classname="arc: should return the block timestamp if called after the collab reward period but before the arc reward period">
    </testcase>
    <testcase name="JointPassportCampaign View functions #lastTimeRewardApplicable collab: should return the block timestamp if called after the arc reward period but before the collab reward period" time="0.0810" classname="collab: should return the block timestamp if called after the arc reward period but before the collab reward period">
    </testcase>
    <testcase name="JointPassportCampaign View functions #lastTimeRewardApplicable arc: should return the arc reward period if called after the arc reward period but before the renewed collab reward period" time="0.0860" classname="arc: should return the arc reward period if called after the arc reward period but before the renewed collab reward period">
    </testcase>
    <testcase name="JointPassportCampaign View functions #lastTimeRewardApplicable collab: should return the collab reward period if called after the collab reward period but before the arc reward period" time="0.0770" classname="collab: should return the collab reward period if called after the collab reward period but before the arc reward period">
    </testcase>
  </testsuite>
  <testsuite name="#arcRewardPerTokenUser" timestamp="2021-12-09T20:07:41" tests="3" file="/Users/gabriel/dev/contracts/test/contracts/staking/jointPassportCampaign.test.ts" time="0.8050" failures="0">
    <testcase name="JointPassportCampaign View functions #arcRewardPerTokenUser should return 0 if the supply is 0" time="0.1220" classname="should return 0 if the supply is 0">
    </testcase>
    <testcase name="JointPassportCampaign View functions #arcRewardPerTokenUser should return a valid reward per token after someone staked" time="0.2700" classname="should return a valid reward per token after someone staked">
    </testcase>
    <testcase name="JointPassportCampaign View functions #arcRewardPerTokenUser should return correct reward per token with two users staked" time="0.4100" classname="should return correct reward per token with two users staked">
    </testcase>
  </testsuite>
  <testsuite name="#collabRewardPerToken" timestamp="2021-12-09T20:07:42" tests="3" file="/Users/gabriel/dev/contracts/test/contracts/staking/jointPassportCampaign.test.ts" time="0.8180" failures="0">
    <testcase name="JointPassportCampaign View functions #collabRewardPerToken should return the reward per token stored if the supply is 0" time="0.1120" classname="should return the reward per token stored if the supply is 0">
    </testcase>
    <testcase name="JointPassportCampaign View functions #collabRewardPerToken should return the correct reward per token after someone staked" time="0.2740" classname="should return the correct reward per token after someone staked">
    </testcase>
    <testcase name="JointPassportCampaign View functions #collabRewardPerToken should return correct reward per token with two tokens staked" time="0.4300" classname="should return correct reward per token with two tokens staked">
    </testcase>
  </testsuite>
  <testsuite name="#arcEarned" timestamp="2021-12-09T20:07:43" tests="2" file="/Users/gabriel/dev/contracts/test/contracts/staking/jointPassportCampaign.test.ts" time="0.7470" failures="0">
    <testcase name="JointPassportCampaign View functions #arcEarned should return the correct amount of arcx earned over time" time="0.2810" classname="should return the correct amount of arcx earned over time">
    </testcase>
    <testcase name="JointPassportCampaign View functions #arcEarned should return the correct amount of arcx earned over time while another user stakes in between" time="0.4650" classname="should return the correct amount of arcx earned over time while another user stakes in between">
    </testcase>
  </testsuite>
  <testsuite name="#collabEarned" timestamp="2021-12-09T20:07:44" tests="2" file="/Users/gabriel/dev/contracts/test/contracts/staking/jointPassportCampaign.test.ts" time="0.7420" failures="0">
    <testcase name="JointPassportCampaign View functions #collabEarned should return the correct amount of collab earned over time" time="0.1670" classname="should return the correct amount of collab earned over time">
    </testcase>
    <testcase name="JointPassportCampaign View functions #collabEarned should return the correct amount of collab earned over time while another user stakes in between" time="0.3360" classname="should return the correct amount of collab earned over time while another user stakes in between">
    </testcase>
  </testsuite>
  <testsuite name="#userAllocation" timestamp="2021-12-09T20:07:45" tests="1" file="/Users/gabriel/dev/contracts/test/contracts/staking/jointPassportCampaign.test.ts" time="0.0040" failures="0">
    <testcase name="JointPassportCampaign View functions #userAllocation should return the correct user allocation" time="0.0030" classname="should return the correct user allocation">
    </testcase>
  </testsuite>
  <testsuite name="#getRewardForDuration" timestamp="2021-12-09T20:07:45" tests="1" file="/Users/gabriel/dev/contracts/test/contracts/staking/jointPassportCampaign.test.ts" time="0.1160" failures="0">
    <testcase name="JointPassportCampaign View functions #getRewardForDuration returns the correct ARC reward for duration" time="0.1160" classname="returns the correct ARC reward for duration">
    </testcase>
  </testsuite>
  <testsuite name="#getCollabRewardForDuration" timestamp="2021-12-09T20:07:45" tests="1" file="/Users/gabriel/dev/contracts/test/contracts/staking/jointPassportCampaign.test.ts" time="0.1160" failures="0">
    <testcase name="JointPassportCampaign View functions #getCollabRewardForDuration returns the correct collab reward for duration" time="0.1150" classname="returns the correct collab reward for duration">
    </testcase>
  </testsuite>
  <testsuite name="Mutative functions" timestamp="2021-12-09T20:07:45" tests="0" file="/Users/gabriel/dev/contracts/test/contracts/staking/jointPassportCampaign.test.ts" time="0.0000" failures="0">
  </testsuite>
  <testsuite name="#stake" timestamp="2021-12-09T20:07:45" tests="9" file="/Users/gabriel/dev/contracts/test/contracts/staking/jointPassportCampaign.test.ts" time="0.9450" failures="0">
    <testcase name="JointPassportCampaign Mutative functions #stake reverts if called without a valid credit score proof" time="0.0230" classname="reverts if called without a valid credit score proof">
    </testcase>
    <testcase name="JointPassportCampaign Mutative functions #stake reverts if called by a user with a credit score that is lower than required" time="0.0370" classname="reverts if called by a user with a credit score that is lower than required">
    </testcase>
    <testcase name="JointPassportCampaign Mutative functions #stake reverts if user stakes more than the limit" time="0.0310" classname="reverts if user stakes more than the limit">
    </testcase>
    <testcase name="JointPassportCampaign Mutative functions #stake reverts if staking more than the balance" time="0.0420" classname="reverts if staking more than the balance">
    </testcase>
    <testcase name="JointPassportCampaign Mutative functions #stake reverts if trying to stake with a proof other than the user&apos;s" time="0.0260" classname="reverts if trying to stake with a proof other than the user&apos;s">
    </testcase>
    <testcase name="JointPassportCampaign Mutative functions #stake reverts if the proof protocol does not match the one registered" time="0.0260" classname="reverts if the proof protocol does not match the one registered">
    </testcase>
    <testcase name="JointPassportCampaign Mutative functions #stake should be able to stake" time="0.1440" classname="should be able to stake">
    </testcase>
    <testcase name="JointPassportCampaign Mutative functions #stake should be able to stake more than the initial limit if the limit has been set to 0" time="0.3480" classname="should be able to stake more than the initial limit if the limit has been set to 0">
    </testcase>
    <testcase name="JointPassportCampaign Mutative functions #stake should update reward correctly after staking" time="0.2590" classname="should update reward correctly after staking">
    </testcase>
  </testsuite>
  <testsuite name="#getReward" timestamp="2021-12-09T20:07:46" tests="7" file="/Users/gabriel/dev/contracts/test/contracts/staking/jointPassportCampaign.test.ts" time="4.2340" failures="0">
    <testcase name="JointPassportCampaign Mutative functions #getReward reverts if no rewards are claimable" time="0.1560" classname="reverts if no rewards are claimable">
    </testcase>
    <testcase name="JointPassportCampaign Mutative functions #getReward claims both rewards gradually over time" time="0.2720" classname="claims both rewards gradually over time">
    </testcase>
    <testcase name="JointPassportCampaign Mutative functions #getReward claims the right amount of rewards given the number of participants" time="0.4610" classname="claims the right amount of rewards given the number of participants">
    </testcase>
    <testcase name="JointPassportCampaign Mutative functions #getReward claims the correct amount of rewards after calling #notifyRewardAmount a second time" time="0.3850" classname="claims the correct amount of rewards after calling #notifyRewardAmount a second time">
    </testcase>
    <testcase name="JointPassportCampaign Mutative functions #getReward claims the collab reward and skip the arc tokens if they are not claimable" time="0.3420" classname="claims the collab reward and skip the arc tokens if they are not claimable">
    </testcase>
    <testcase name="JointPassportCampaign Mutative functions #getReward claims the rewards even if no proof was passed" time="0.1790" classname="claims the rewards even if no proof was passed">
    </testcase>
    <testcase name="JointPassportCampaign Mutative functions #getReward updates rewards accordingly if the user exits in between" time="1.5540" classname="updates rewards accordingly if the user exits in between">
    </testcase>
  </testsuite>
  <testsuite name="#withdraw" timestamp="2021-12-09T20:07:50" tests="3" file="/Users/gabriel/dev/contracts/test/contracts/staking/jointPassportCampaign.test.ts" time="0.5740" failures="0">
    <testcase name="JointPassportCampaign Mutative functions #withdraw reverts if trying to withdraw more than the staked balance" time="0.1540" classname="reverts if trying to withdraw more than the staked balance">
    </testcase>
    <testcase name="JointPassportCampaign Mutative functions #withdraw withdraws the correct amount" time="0.2060" classname="withdraws the correct amount">
    </testcase>
    <testcase name="JointPassportCampaign Mutative functions #withdraw should withdraw the correct amount even if an empty proof was given" time="0.2100" classname="should withdraw the correct amount even if an empty proof was given">
    </testcase>
  </testsuite>
  <testsuite name="#exit" timestamp="2021-12-09T20:07:51" tests="3" file="/Users/gabriel/dev/contracts/test/contracts/staking/jointPassportCampaign.test.ts" time="1.2500" failures="0">
    <testcase name="JointPassportCampaign Mutative functions #exit reverts if no rewards are claimable" time="0.1500" classname="reverts if no rewards are claimable">
    </testcase>
    <testcase name="JointPassportCampaign Mutative functions #exit exits with the right amount of staked tokens and rewards" time="0.3940" classname="exits with the right amount of staked tokens and rewards">
    </testcase>
    <testcase name="JointPassportCampaign Mutative functions #exit withdraws the correct amount even if an empty proof was given" time="0.3600" classname="withdraws the correct amount even if an empty proof was given">
    </testcase>
  </testsuite>
  <testsuite name="Restricted functions" timestamp="2021-12-09T20:07:52" tests="0" file="/Users/gabriel/dev/contracts/test/contracts/staking/jointPassportCampaign.test.ts" time="0.0000" failures="0">
  </testsuite>
  <testsuite name="#setCollabRewardsDistributor" timestamp="2021-12-09T20:07:52" tests="2" file="/Users/gabriel/dev/contracts/test/contracts/staking/jointPassportCampaign.test.ts" time="0.0180" failures="0">
    <testcase name="JointPassportCampaign Restricted functions #setCollabRewardsDistributor reverts if called by non-admin" time="0.0050" classname="reverts if called by non-admin">
    </testcase>
    <testcase name="JointPassportCampaign Restricted functions #setCollabRewardsDistributor sets the rewards distributor if called by the current collabRewardsDistributor" time="0.0110" classname="sets the rewards distributor if called by the current collabRewardsDistributor">
    </testcase>
  </testsuite>
  <testsuite name="#setRewardsDistributor" timestamp="2021-12-09T20:07:52" tests="2" file="/Users/gabriel/dev/contracts/test/contracts/staking/jointPassportCampaign.test.ts" time="0.0160" failures="0">
    <testcase name="JointPassportCampaign Restricted functions #setRewardsDistributor reverts if called by non-owner" time="0.0040" classname="reverts if called by non-owner">
    </testcase>
    <testcase name="JointPassportCampaign Restricted functions #setRewardsDistributor sets the rewards distributor if called by owner" time="0.0110" classname="sets the rewards distributor if called by owner">
    </testcase>
  </testsuite>
  <testsuite name="#setRewardsDuration" timestamp="2021-12-09T20:07:52" tests="2" file="/Users/gabriel/dev/contracts/test/contracts/staking/jointPassportCampaign.test.ts" time="0.0310" failures="0">
    <testcase name="JointPassportCampaign Restricted functions #setRewardsDuration reverts if called by non-owner" time="0.0040" classname="reverts if called by non-owner">
    </testcase>
    <testcase name="JointPassportCampaign Restricted functions #setRewardsDuration sets the right duration if called by owner" time="0.0250" classname="sets the right duration if called by owner">
    </testcase>
  </testsuite>
  <testsuite name="#notifyRewardAmount" timestamp="2021-12-09T20:07:52" tests="9" file="/Users/gabriel/dev/contracts/test/contracts/staking/jointPassportCampaign.test.ts" time="0.5570" failures="0">
    <testcase name="JointPassportCampaign Restricted functions #notifyRewardAmount reverts if called by non-reward distributors" time="0.0050" classname="reverts if called by non-reward distributors">
    </testcase>
    <testcase name="JointPassportCampaign Restricted functions #notifyRewardAmount is callable by the arc distributor" time="0.0500" classname="is callable by the arc distributor">
    </testcase>
    <testcase name="JointPassportCampaign Restricted functions #notifyRewardAmount is callable by the collab distributor" time="0.0500" classname="is callable by the collab distributor">
    </testcase>
    <testcase name="JointPassportCampaign Restricted functions #notifyRewardAmount reverts if the arcx rewards amount are less than the amount of arcx on the contract" time="0.0060" classname="reverts if the arcx rewards amount are less than the amount of arcx on the contract">
    </testcase>
    <testcase name="JointPassportCampaign Restricted functions #notifyRewardAmount reverts if collab reward amount is less than the amount of collab on the contract" time="0.0050" classname="reverts if collab reward amount is less than the amount of collab on the contract">
    </testcase>
    <testcase name="JointPassportCampaign Restricted functions #notifyRewardAmount reverts if arcx distributor tries to notify the collab rewards" time="0.0040" classname="reverts if arcx distributor tries to notify the collab rewards">
    </testcase>
    <testcase name="JointPassportCampaign Restricted functions #notifyRewardAmount reverts if collab distributor tries to notify the arcx rewards" time="0.0050" classname="reverts if collab distributor tries to notify the arcx rewards">
    </testcase>
    <testcase name="JointPassportCampaign Restricted functions #notifyRewardAmount updates arc rewards correctly after a new reward update" time="0.1210" classname="updates arc rewards correctly after a new reward update">
    </testcase>
    <testcase name="JointPassportCampaign Restricted functions #notifyRewardAmount updates collab rewards correctly after a new reward update" time="0.1200" classname="updates collab rewards correctly after a new reward update">
    </testcase>
  </testsuite>
  <testsuite name="#recoverERC20" timestamp="2021-12-09T20:07:52" tests="5" file="/Users/gabriel/dev/contracts/test/contracts/staking/jointPassportCampaign.test.ts" time="0.3950" failures="0">
    <testcase name="JointPassportCampaign Restricted functions #recoverERC20 reverts if called by non-owner" time="0.0040" classname="reverts if called by non-owner">
    </testcase>
    <testcase name="JointPassportCampaign Restricted functions #recoverERC20 reverts if trying to recover staking or collab tokens" time="0.0200" classname="reverts if trying to recover staking or collab tokens">
    </testcase>
    <testcase name="JointPassportCampaign Restricted functions #recoverERC20 reverts if owner tries to recover a greater amount of arc than the surplus reward amount" time="0.1290" classname="reverts if owner tries to recover a greater amount of arc than the surplus reward amount">
    </testcase>
    <testcase name="JointPassportCampaign Restricted functions #recoverERC20 lets the owner recover the erc20 on this contract" time="0.0410" classname="lets the owner recover the erc20 on this contract">
    </testcase>
    <testcase name="JointPassportCampaign Restricted functions #recoverERC20 lets the owner recover the surplus of arc on this contract" time="0.0620" classname="lets the owner recover the surplus of arc on this contract">
    </testcase>
  </testsuite>
  <testsuite name="#recoverCollab" timestamp="2021-12-09T20:07:53" tests="3" file="/Users/gabriel/dev/contracts/test/contracts/staking/jointPassportCampaign.test.ts" time="0.2700" failures="0">
    <testcase name="JointPassportCampaign Restricted functions #recoverCollab reverts if called by non-owner" time="0.0040" classname="reverts if called by non-owner">
    </testcase>
    <testcase name="JointPassportCampaign Restricted functions #recoverCollab reverts if collab tries to recover a greater amount of collab token than the surplus reward amount" time="0.1340" classname="reverts if collab tries to recover a greater amount of collab token than the surplus reward amount">
    </testcase>
    <testcase name="JointPassportCampaign Restricted functions #recoverCollab lets the collab reward distributor recover the surplus of collab token on the contract" time="0.1280" classname="lets the collab reward distributor recover the surplus of collab token on the contract">
    </testcase>
  </testsuite>
  <testsuite name="#setTokensClaimable" timestamp="2021-12-09T20:07:53" tests="2" file="/Users/gabriel/dev/contracts/test/contracts/staking/jointPassportCampaign.test.ts" time="0.0160" failures="0">
    <testcase name="JointPassportCampaign Restricted functions #setTokensClaimable reverts if called by non-owner" time="0.0040" classname="reverts if called by non-owner">
    </testcase>
    <testcase name="JointPassportCampaign Restricted functions #setTokensClaimable lets the owner make the arc tokens claimable" time="0.0100" classname="lets the owner make the arc tokens claimable">
    </testcase>
  </testsuite>
  <testsuite name="#setCollabTokensClaimable" timestamp="2021-12-09T20:07:53" tests="2" file="/Users/gabriel/dev/contracts/test/contracts/staking/jointPassportCampaign.test.ts" time="0.0170" failures="0">
    <testcase name="JointPassportCampaign Restricted functions #setCollabTokensClaimable reverts if called by non-owner" time="0.0040" classname="reverts if called by non-owner">
    </testcase>
    <testcase name="JointPassportCampaign Restricted functions #setCollabTokensClaimable lets the collab make the collab tokens claimable" time="0.0120" classname="lets the collab make the collab tokens claimable">
    </testcase>
  </testsuite>
  <testsuite name="#setProofProtocol" timestamp="2021-12-09T20:07:53" tests="2" file="/Users/gabriel/dev/contracts/test/contracts/staking/jointPassportCampaign.test.ts" time="0.0280" failures="0">
    <testcase name="JointPassportCampaign Restricted functions #setProofProtocol reverts if called by non-owner" time="0.0040" classname="reverts if called by non-owner">
    </testcase>
    <testcase name="JointPassportCampaign Restricted functions #setProofProtocol sets the proof protocol" time="0.0200" classname="sets the proof protocol">
    </testcase>
  </testsuite>
  <testsuite name="Scenarios" timestamp="2021-12-09T20:07:53" tests="7" file="/Users/gabriel/dev/contracts/test/contracts/staking/jointPassportCampaign.test.ts" time="8.6250" failures="0">
    <testcase name="JointPassportCampaign Scenarios distributes both rewards to 3 users correctly" time="3.0160" classname="distributes both rewards to 3 users correctly">
    </testcase>
    <testcase name="JointPassportCampaign Scenarios should not get any rewards if user stakes before the reward is notified" time="0.2140" classname="should not get any rewards if user stakes before the reward is notified">
    </testcase>
    <testcase name="JointPassportCampaign Scenarios should distribute rewards to users correctly" time="2.1410" classname="should distribute rewards to users correctly">
    </testcase>
    <testcase name="JointPassportCampaign Scenarios should distribute rewards correctly for 2 users" time="0.4270" classname="should distribute rewards correctly for 2 users">
    </testcase>
    <testcase name="JointPassportCampaign Scenarios should distribute rewards to 3 users correctly" time="0.9510" classname="should distribute rewards to 3 users correctly">
    </testcase>
    <testcase name="JointPassportCampaign Scenarios should distribute rewards correctly if new rewards are notified before the end of the period" time="0.7220" classname="should distribute rewards correctly if new rewards are notified before the end of the period">
    </testcase>
    <testcase name="JointPassportCampaign Scenarios should allow user to stake, then credit score threshold is raised and user should not be able to stake more" time="0.3310" classname="should allow user to stake, then credit score threshold is raised and user should not be able to stake more">
    </testcase>
  </testsuite>
  <testsuite name="PassportCampaign" timestamp="2021-12-09T20:08:02" tests="0" file="/Users/gabriel/dev/contracts/test/contracts/staking/passportCampaign.test.ts" time="0.0000" failures="0">
  </testsuite>
  <testsuite name="View functions" timestamp="2021-12-09T20:08:02" tests="0" file="/Users/gabriel/dev/contracts/test/contracts/staking/passportCampaign.test.ts" time="0.0000" failures="0">
  </testsuite>
  <testsuite name="#lastTimeRewardApplicable" timestamp="2021-12-09T20:08:02" tests="2" file="/Users/gabriel/dev/contracts/test/contracts/staking/passportCampaign.test.ts" time="0.3060" failures="0">
    <testcase name="PassportCampaign View functions #lastTimeRewardApplicable should return the block timestamp if called before the reward period finished" time="0.0060" classname="should return the block timestamp if called before the reward period finished">
    </testcase>
    <testcase name="PassportCampaign View functions #lastTimeRewardApplicable should return the period finish if called after reward period has finished" time="0.0210" classname="should return the period finish if called after reward period has finished">
    </testcase>
  </testsuite>
  <testsuite name="#balanceOf" timestamp="2021-12-09T20:08:03" tests="1" file="/Users/gabriel/dev/contracts/test/contracts/staking/passportCampaign.test.ts" time="0.2120" failures="0">
    <testcase name="PassportCampaign View functions #balanceOf should return the correct balance" time="0.2110" classname="should return the correct balance">
    </testcase>
  </testsuite>
  <testsuite name="#rewardPerToken" timestamp="2021-12-09T20:08:03" tests="2" file="/Users/gabriel/dev/contracts/test/contracts/staking/passportCampaign.test.ts" time="0.4760" failures="0">
    <testcase name="PassportCampaign View functions #rewardPerToken should return the reward per token stored if the supply is 0" time="0.0030" classname="should return the reward per token stored if the supply is 0">
    </testcase>
    <testcase name="PassportCampaign View functions #rewardPerToken should return a valid reward per token after someone staked" time="0.1930" classname="should return a valid reward per token after someone staked">
    </testcase>
  </testsuite>
  <testsuite name="#userAllocation" timestamp="2021-12-09T20:08:03" tests="1" file="/Users/gabriel/dev/contracts/test/contracts/staking/passportCampaign.test.ts" time="0.1330" failures="0">
    <testcase name="PassportCampaign View functions #userAllocation should return the correct user allocation" time="0.0020" classname="should return the correct user allocation">
    </testcase>
  </testsuite>
  <testsuite name="#earned" timestamp="2021-12-09T20:08:04" tests="2" file="/Users/gabriel/dev/contracts/test/contracts/staking/passportCampaign.test.ts" time="1.4780" failures="0">
    <testcase name="PassportCampaign View functions #earned should return the correct amount earned over time" time="0.1250" classname="should return the correct amount earned over time">
    </testcase>
    <testcase name="PassportCampaign View functions #earned should return the correct amount earned over time while another user stakes in between" time="1.0800" classname="should return the correct amount earned over time while another user stakes in between">
    </testcase>
  </testsuite>
  <testsuite name="#getRewardForDuration" timestamp="2021-12-09T20:08:05" tests="1" file="/Users/gabriel/dev/contracts/test/contracts/staking/passportCampaign.test.ts" time="0.2110" failures="0">
    <testcase name="PassportCampaign View functions #getRewardForDuration returns the correct reward for duration" time="0.0070" classname="returns the correct reward for duration">
    </testcase>
  </testsuite>
  <testsuite name="Mutative functions" timestamp="2021-12-09T20:08:05" tests="0" file="/Users/gabriel/dev/contracts/test/contracts/staking/passportCampaign.test.ts" time="0.0000" failures="0">
  </testsuite>
  <testsuite name="#stake" timestamp="2021-12-09T20:08:05" tests="8" file="/Users/gabriel/dev/contracts/test/contracts/staking/passportCampaign.test.ts" time="3.8490" failures="0">
    <testcase name="PassportCampaign Mutative functions #stake reverts if called without a valid credit score proof" time="0.0140" classname="reverts if called without a valid credit score proof">
    </testcase>
    <testcase name="PassportCampaign Mutative functions #stake reverts if called by a user with a credit score that is lower than required" time="0.0510" classname="reverts if called by a user with a credit score that is lower than required">
    </testcase>
    <testcase name="PassportCampaign Mutative functions #stake reverts if user stakes more than the limit" time="0.0450" classname="reverts if user stakes more than the limit">
    </testcase>
    <testcase name="PassportCampaign Mutative functions #stake should not be able to stake more than balance" time="0.0340" classname="should not be able to stake more than balance">
    </testcase>
    <testcase name="PassportCampaign Mutative functions #stake reverts if using a different protocol than the one registered" time="0.0120" classname="reverts if using a different protocol than the one registered">
    </testcase>
    <testcase name="PassportCampaign Mutative functions #stake should be able to stake" time="0.1970" classname="should be able to stake">
    </testcase>
    <testcase name="PassportCampaign Mutative functions #stake should be able to stake more than the intial limit if the limit has been set to 0" time="0.3110" classname="should be able to stake more than the intial limit if the limit has been set to 0">
    </testcase>
    <testcase name="PassportCampaign Mutative functions #stake should update reward correctly after staking" time="0.1270" classname="should update reward correctly after staking">
    </testcase>
  </testsuite>
  <testsuite name="#getReward" timestamp="2021-12-09T20:08:09" tests="4" file="/Users/gabriel/dev/contracts/test/contracts/staking/passportCampaign.test.ts" time="1.7510" failures="0">
    <testcase name="PassportCampaign Mutative functions #getReward should not be able to get the reward if the tokens are not claimable" time="0.0980" classname="should not be able to get the reward if the tokens are not claimable">
    </testcase>
    <testcase name="PassportCampaign Mutative functions #getReward should be able to claim rewards gradually over time" time="0.3020" classname="should be able to claim rewards gradually over time">
    </testcase>
    <testcase name="PassportCampaign Mutative functions #getReward should be able to claim the right amount of rewards given the number of participants" time="0.5300" classname="should be able to claim the right amount of rewards given the number of participants">
    </testcase>
    <testcase name="PassportCampaign Mutative functions #getReward should be able to claim rewards even if no proof was passed" time="0.2110" classname="should be able to claim rewards even if no proof was passed">
    </testcase>
  </testsuite>
  <testsuite name="#withdraw" timestamp="2021-12-09T20:08:11" tests="3" file="/Users/gabriel/dev/contracts/test/contracts/staking/passportCampaign.test.ts" time="0.7970" failures="0">
    <testcase name="PassportCampaign Mutative functions #withdraw should not be able to withdraw more than the balance" time="0.0860" classname="should not be able to withdraw more than the balance">
    </testcase>
    <testcase name="PassportCampaign Mutative functions #withdraw should withdraw the correct amount" time="0.1440" classname="should withdraw the correct amount">
    </testcase>
    <testcase name="PassportCampaign Mutative functions #withdraw should withdraw the correct amount even if an empty proof was given" time="0.1420" classname="should withdraw the correct amount even if an empty proof was given">
    </testcase>
  </testsuite>
  <testsuite name="#exit" timestamp="2021-12-09T20:08:12" tests="2" file="/Users/gabriel/dev/contracts/test/contracts/staking/passportCampaign.test.ts" time="0.7250" failures="0">
    <testcase name="PassportCampaign Mutative functions #exit should be able to exit and get the right amount of staked tokens and rewards" time="0.2340" classname="should be able to exit and get the right amount of staked tokens and rewards">
    </testcase>
    <testcase name="PassportCampaign Mutative functions #exit should withdraw the correct amount even if an empty proof was given" time="0.2220" classname="should withdraw the correct amount even if an empty proof was given">
    </testcase>
  </testsuite>
  <testsuite name="Admin functions" timestamp="2021-12-09T20:08:12" tests="0" file="/Users/gabriel/dev/contracts/test/contracts/staking/passportCampaign.test.ts" time="0.0000" failures="0">
  </testsuite>
  <testsuite name="#init" timestamp="2021-12-09T20:08:12" tests="3" file="/Users/gabriel/dev/contracts/test/contracts/staking/passportCampaign.test.ts" time="0.0840" failures="0">
    <testcase name="PassportCampaign Admin functions #init should not be callable by anyone" time="0.0050" classname="should not be callable by anyone">
    </testcase>
    <testcase name="PassportCampaign Admin functions #init should only be callable by the contract owner" time="0.0400" classname="should only be callable by the contract owner">
    </testcase>
    <testcase name="PassportCampaign Admin functions #init should not be called twice by the contract owner" time="0.0360" classname="should not be called twice by the contract owner">
    </testcase>
  </testsuite>
  <testsuite name="#notifyRewardAmount" timestamp="2021-12-09T20:08:12" tests="3" file="/Users/gabriel/dev/contracts/test/contracts/staking/passportCampaign.test.ts" time="0.2690" failures="0">
    <testcase name="PassportCampaign Admin functions #notifyRewardAmount should not be callable by anyone" time="0.0040" classname="should not be callable by anyone">
    </testcase>
    <testcase name="PassportCampaign Admin functions #notifyRewardAmount should only be callable by the rewards distributor" time="0.0960" classname="should only be callable by the rewards distributor">
    </testcase>
    <testcase name="PassportCampaign Admin functions #notifyRewardAmount should update rewards correctly after a new reward update" time="0.1680" classname="should update rewards correctly after a new reward update">
    </testcase>
  </testsuite>
  <testsuite name="#setRewardsDistributor" timestamp="2021-12-09T20:08:13" tests="2" file="/Users/gabriel/dev/contracts/test/contracts/staking/passportCampaign.test.ts" time="0.0300" failures="0">
    <testcase name="PassportCampaign Admin functions #setRewardsDistributor should not be callable by non-admin" time="0.0030" classname="should not be callable by non-admin">
    </testcase>
    <testcase name="PassportCampaign Admin functions #setRewardsDistributor should set rewardsDistributor if called by admin" time="0.0250" classname="should set rewardsDistributor if called by admin">
    </testcase>
  </testsuite>
  <testsuite name="#setRewardsDuration" timestamp="2021-12-09T20:08:13" tests="2" file="/Users/gabriel/dev/contracts/test/contracts/staking/passportCampaign.test.ts" time="0.0300" failures="0">
    <testcase name="PassportCampaign Admin functions #setRewardsDuration should not be claimable by anyone" time="0.0040" classname="should not be claimable by anyone">
    </testcase>
    <testcase name="PassportCampaign Admin functions #setRewardsDuration should only be callable by the contract owner and set the right duration" time="0.0250" classname="should only be callable by the contract owner and set the right duration">
    </testcase>
  </testsuite>
  <testsuite name="#recoverERC20" timestamp="2021-12-09T20:08:13" tests="3" file="/Users/gabriel/dev/contracts/test/contracts/staking/passportCampaign.test.ts" time="0.2510" failures="0">
    <testcase name="PassportCampaign Admin functions #recoverERC20 should not be callable by anyone" time="0.0040" classname="should not be callable by anyone">
    </testcase>
    <testcase name="PassportCampaign Admin functions #recoverERC20 should not recover staking or reward token" time="0.1700" classname="should not recover staking or reward token">
    </testcase>
    <testcase name="PassportCampaign Admin functions #recoverERC20 should let admin recover the erc20 on this contract" time="0.0390" classname="should let admin recover the erc20 on this contract">
    </testcase>
  </testsuite>
  <testsuite name="#setTokensClaimable" timestamp="2021-12-09T20:08:13" tests="2" file="/Users/gabriel/dev/contracts/test/contracts/staking/passportCampaign.test.ts" time="0.0310" failures="0">
    <testcase name="PassportCampaign Admin functions #setTokensClaimable should not be claimable by anyone" time="0.0050" classname="should not be claimable by anyone">
    </testcase>
    <testcase name="PassportCampaign Admin functions #setTokensClaimable should only be callable by the contract owner" time="0.0260" classname="should only be callable by the contract owner">
    </testcase>
  </testsuite>
  <testsuite name="#setCreditScoreThreshold" timestamp="2021-12-09T20:08:13" tests="2" file="/Users/gabriel/dev/contracts/test/contracts/staking/passportCampaign.test.ts" time="0.1870" failures="0">
    <testcase name="PassportCampaign Admin functions #setCreditScoreThreshold reverts if called by non-owner" time="0.0070" classname="reverts if called by non-owner">
    </testcase>
    <testcase name="PassportCampaign Admin functions #setCreditScoreThreshold sets the credit score threshold" time="0.1770" classname="sets the credit score threshold">
    </testcase>
  </testsuite>
  <testsuite name="#setPassportScoresContract" timestamp="2021-12-09T20:08:13" tests="4" file="/Users/gabriel/dev/contracts/test/contracts/staking/passportCampaign.test.ts" time="0.6580" failures="0">
    <testcase name="PassportCampaign Admin functions #setPassportScoresContract reverts if called by non-admin" time="0.0380" classname="reverts if called by non-admin">
    </testcase>
    <testcase name="PassportCampaign Admin functions #setPassportScoresContract reverts if setting the same contract" time="0.0030" classname="reverts if setting the same contract">
    </testcase>
    <testcase name="PassportCampaign Admin functions #setPassportScoresContract reverts if the contract is not an address" time="0.0030" classname="reverts if the contract is not an address">
    </testcase>
    <testcase name="PassportCampaign Admin functions #setPassportScoresContract sets a new credit score contract" time="0.0350" classname="sets a new credit score contract">
    </testcase>
  </testsuite>
  <testsuite name="#setMaxStakePerUser" timestamp="2021-12-09T20:08:14" tests="2" file="/Users/gabriel/dev/contracts/test/contracts/staking/passportCampaign.test.ts" time="0.1630" failures="0">
    <testcase name="PassportCampaign Admin functions #setMaxStakePerUser reverts if called by non-admin" time="0.0030" classname="reverts if called by non-admin">
    </testcase>
    <testcase name="PassportCampaign Admin functions #setMaxStakePerUser sets the max staked per user" time="0.1570" classname="sets the max staked per user">
    </testcase>
  </testsuite>
  <testsuite name="#setProofProtocol" timestamp="2021-12-09T20:08:14" tests="2" file="/Users/gabriel/dev/contracts/test/contracts/staking/passportCampaign.test.ts" time="0.0470" failures="0">
    <testcase name="PassportCampaign Admin functions #setProofProtocol reverts if called by non-admin" time="0.0040" classname="reverts if called by non-admin">
    </testcase>
    <testcase name="PassportCampaign Admin functions #setProofProtocol sets the proof protocol" time="0.0420" classname="sets the proof protocol">
    </testcase>
  </testsuite>
  <testsuite name="Scenarios" timestamp="2021-12-09T20:08:14" tests="6" file="/Users/gabriel/dev/contracts/test/contracts/staking/passportCampaign.test.ts" time="5.1550" failures="0">
    <testcase name="PassportCampaign Scenarios should not get any rewards if user stakes before the reward is notified" time="0.2250" classname="should not get any rewards if user stakes before the reward is notified">
    </testcase>
    <testcase name="PassportCampaign Scenarios should distribute rewards to users correctly" time="1.6430" classname="should distribute rewards to users correctly">
    </testcase>
    <testcase name="PassportCampaign Scenarios should distribute rewards correctly for 2 users" time="0.4290" classname="should distribute rewards correctly for 2 users">
    </testcase>
    <testcase name="PassportCampaign Scenarios should distribute rewards to 3 users correctly" time="0.8230" classname="should distribute rewards to 3 users correctly">
    </testcase>
    <testcase name="PassportCampaign Scenarios should distribute rewards correctly if new rewards are notified before the end of the period" time="1.5840" classname="should distribute rewards correctly if new rewards are notified before the end of the period">
    </testcase>
    <testcase name="PassportCampaign Scenarios should allow user to stake, then credit score threshold is raised and user should not be able to stake more" time="0.2740" classname="should allow user to stake, then credit score threshold is raised and user should not be able to stake more">
    </testcase>
  </testsuite>
  <testsuite name="StakingAccrualERC20" timestamp="2021-12-09T20:08:19" tests="0" file="/Users/gabriel/dev/contracts/test/contracts/staking/stakingAccrualERC20/stakingAccrualERC20.test.ts" time="0.0000" failures="0">
  </testsuite>
  <testsuite name="Admin functions" timestamp="2021-12-09T20:08:20" tests="0" file="/Users/gabriel/dev/contracts/test/contracts/staking/stakingAccrualERC20/stakingAccrualERC20.test.ts" time="0.0000" failures="0">
  </testsuite>
  <testsuite name="#init" timestamp="2021-12-09T20:08:20" tests="4" file="/Users/gabriel/dev/contracts/test/contracts/staking/stakingAccrualERC20/stakingAccrualERC20.test.ts" time="0.0760" failures="0">
    <testcase name="StakingAccrualERC20 Admin functions #init reverts if called by non-admin" time="0.0080" classname="reverts if called by non-admin">
    </testcase>
    <testcase name="StakingAccrualERC20 Admin functions #init reverts if called twice" time="0.0110" classname="reverts if called twice">
    </testcase>
    <testcase name="StakingAccrualERC20 Admin functions #init reverts if the staking token is address 0" time="0.0420" classname="reverts if the staking token is address 0">
    </testcase>
    <testcase name="StakingAccrualERC20 Admin functions #init sets the staking token, the staking cooldown and the sablier contract" time="0.0080" classname="sets the staking token, the staking cooldown and the sablier contract">
    </testcase>
  </testsuite>
  <testsuite name="#setExitCooldownDuration" timestamp="2021-12-09T20:08:20" tests="2" file="/Users/gabriel/dev/contracts/test/contracts/staking/stakingAccrualERC20/stakingAccrualERC20.test.ts" time="0.0300" failures="0">
    <testcase name="StakingAccrualERC20 Admin functions #setExitCooldownDuration reverts if called by non-admin" time="0.0050" classname="reverts if called by non-admin">
    </testcase>
    <testcase name="StakingAccrualERC20 Admin functions #setExitCooldownDuration sets the cooldown duration" time="0.0250" classname="sets the cooldown duration">
    </testcase>
  </testsuite>
  <testsuite name="#recoverTokens" timestamp="2021-12-09T20:08:20" tests="3" file="/Users/gabriel/dev/contracts/test/contracts/staking/stakingAccrualERC20/stakingAccrualERC20.test.ts" time="0.3060" failures="0">
    <testcase name="StakingAccrualERC20 Admin functions #recoverTokens reverts if called by non-admin" time="0.0030" classname="reverts if called by non-admin">
    </testcase>
    <testcase name="StakingAccrualERC20 Admin functions #recoverTokens reverts if trying to recover more tokens than the supply" time="0.0040" classname="reverts if trying to recover more tokens than the supply">
    </testcase>
    <testcase name="StakingAccrualERC20 Admin functions #recoverTokens recovers the staked tokens and reduces the supply" time="0.0920" classname="recovers the staked tokens and reduces the supply">
    </testcase>
  </testsuite>
  <testsuite name="#setSablierContract" timestamp="2021-12-09T20:08:21" tests="2" file="/Users/gabriel/dev/contracts/test/contracts/staking/stakingAccrualERC20/stakingAccrualERC20.test.ts" time="0.0550" failures="0">
    <testcase name="StakingAccrualERC20 Admin functions #setSablierContract reverts if called by non-admin" time="0.0020" classname="reverts if called by non-admin">
    </testcase>
    <testcase name="StakingAccrualERC20 Admin functions #setSablierContract sets the sablier contract if called the admin" time="0.0300" classname="sets the sablier contract if called the admin">
    </testcase>
  </testsuite>
  <testsuite name="#setSablierStreamId" timestamp="2021-12-09T20:08:21" tests="3" file="/Users/gabriel/dev/contracts/test/contracts/staking/stakingAccrualERC20/stakingAccrualERC20.test.ts" time="0.1440" failures="0">
    <testcase name="StakingAccrualERC20 Admin functions #setSablierStreamId reverts if called by non-admin" time="0.0060" classname="reverts if called by non-admin">
    </testcase>
    <testcase name="StakingAccrualERC20 Admin functions #setSablierStreamId reverts if setting an incorrect ID" time="0.0050" classname="reverts if setting an incorrect ID">
    </testcase>
    <testcase name="StakingAccrualERC20 Admin functions #setSablierStreamId sets the sablier stream ID" time="0.1270" classname="sets the sablier stream ID">
    </testcase>
  </testsuite>
  <testsuite name="#setProofProtocol" timestamp="2021-12-09T20:08:21" tests="2" file="/Users/gabriel/dev/contracts/test/contracts/staking/stakingAccrualERC20/stakingAccrualERC20.test.ts" time="0.0490" failures="0">
    <testcase name="StakingAccrualERC20 Admin functions #setProofProtocol reverts if called by non-admin" time="0.0050" classname="reverts if called by non-admin">
    </testcase>
    <testcase name="StakingAccrualERC20 Admin functions #setProofProtocol sets the proof protocol" time="0.0430" classname="sets the proof protocol">
    </testcase>
  </testsuite>
  <testsuite name="#claimStreamFunds" timestamp="2021-12-09T20:08:21" tests="1" file="/Users/gabriel/dev/contracts/test/contracts/staking/stakingAccrualERC20/stakingAccrualERC20.test.ts" time="0.3640" failures="0">
    <testcase name="StakingAccrualERC20 Admin functions #claimStreamFunds claims the funds from the sablier stream" time="0.3630" classname="claims the funds from the sablier stream">
    </testcase>
  </testsuite>
  <testsuite name="#setDefiPassportContract" timestamp="2021-12-09T20:08:21" tests="3" file="/Users/gabriel/dev/contracts/test/contracts/staking/stakingAccrualERC20/stakingAccrualERC20.test.ts" time="0.1010" failures="0">
    <testcase name="StakingAccrualERC20 Admin functions #setDefiPassportContract reverts if called by non-admin" time="0.0130" classname="reverts if called by non-admin">
    </testcase>
    <testcase name="StakingAccrualERC20 Admin functions #setDefiPassportContract reverts if called with set address" time="0.0370" classname="reverts if called with set address">
    </testcase>
    <testcase name="StakingAccrualERC20 Admin functions #setDefiPassportContract sets a new defi passport contract" time="0.0450" classname="sets a new defi passport contract">
    </testcase>
  </testsuite>
  <testsuite name="Mutating functions" timestamp="2021-12-09T20:08:21" tests="0" file="/Users/gabriel/dev/contracts/test/contracts/staking/stakingAccrualERC20/stakingAccrualERC20.test.ts" time="0.0000" failures="0">
  </testsuite>
  <testsuite name="#stake" timestamp="2021-12-09T20:08:21" tests="5" file="/Users/gabriel/dev/contracts/test/contracts/staking/stakingAccrualERC20/stakingAccrualERC20.test.ts" time="0.5050" failures="0">
    <testcase name="StakingAccrualERC20 Mutating functions #stake reverts if user does not have a passport" time="0.0140" classname="reverts if user does not have a passport">
    </testcase>
    <testcase name="StakingAccrualERC20 Mutating functions #stake reverts if staking more than balance" time="0.0080" classname="reverts if staking more than balance">
    </testcase>
    <testcase name="StakingAccrualERC20 Mutating functions #stake reverts if the user&apos;s cooldown timestamp is &gt; 0" time="0.0950" classname="reverts if the user&apos;s cooldown timestamp is &gt; 0">
    </testcase>
    <testcase name="StakingAccrualERC20 Mutating functions #stake stakes the staking token and mints an equal amount of stARCx, with a proof" time="0.0700" classname="stakes the staking token and mints an equal amount of stARCx, with a proof">
    </testcase>
    <testcase name="StakingAccrualERC20 Mutating functions #stake withdraws from the sablier stream" time="0.3130" classname="withdraws from the sablier stream">
    </testcase>
  </testsuite>
  <testsuite name="#startExitCooldown" timestamp="2021-12-09T20:08:22" tests="3" file="/Users/gabriel/dev/contracts/test/contracts/staking/stakingAccrualERC20/stakingAccrualERC20.test.ts" time="0.2330" failures="0">
    <testcase name="StakingAccrualERC20 Mutating functions #startExitCooldown reverts if user has 0 balance" time="0.0050" classname="reverts if user has 0 balance">
    </testcase>
    <testcase name="StakingAccrualERC20 Mutating functions #startExitCooldown starts the exit cooldown" time="0.1120" classname="starts the exit cooldown">
    </testcase>
    <testcase name="StakingAccrualERC20 Mutating functions #startExitCooldown reverts if the exit cooldown is &gt; 0" time="0.1130" classname="reverts if the exit cooldown is &gt; 0">
    </testcase>
  </testsuite>
  <testsuite name="#exit" timestamp="2021-12-09T20:08:22" tests="8" file="/Users/gabriel/dev/contracts/test/contracts/staking/stakingAccrualERC20/stakingAccrualERC20.test.ts" time="1.8200" failures="0">
    <testcase name="StakingAccrualERC20 Mutating functions #exit reverts if user has 0 balance" time="0.0060" classname="reverts if user has 0 balance">
    </testcase>
    <testcase name="StakingAccrualERC20 Mutating functions #exit reverts if the cooldown timestamp is not passed" time="0.0930" classname="reverts if the cooldown timestamp is not passed">
    </testcase>
    <testcase name="StakingAccrualERC20 Mutating functions #exit reverts if the startExitCooldown was not initiated" time="0.0690" classname="reverts if the startExitCooldown was not initiated">
    </testcase>
    <testcase name="StakingAccrualERC20 Mutating functions #exit exits from the fund" time="0.1820" classname="exits from the fund">
    </testcase>
    <testcase name="StakingAccrualERC20 Mutating functions #exit withdraws from the sablier stream" time="0.3970" classname="withdraws from the sablier stream">
    </testcase>
    <testcase name="StakingAccrualERC20 Mutating functions #exit exits with MORE ARCx than initially if the contract has accumulated more tokens" time="0.2610" classname="exits with MORE ARCx than initially if the contract has accumulated more tokens">
    </testcase>
    <testcase name="StakingAccrualERC20 Mutating functions #exit exits with LESS ARCx than initially if the admin had removed tokens" time="0.2760" classname="exits with LESS ARCx than initially if the admin had removed tokens">
    </testcase>
    <testcase name="StakingAccrualERC20 Mutating functions #exit exits at the end of the sablier stream" time="0.5280" classname="exits at the end of the sablier stream">
    </testcase>
  </testsuite>
  <testsuite name="#getExchangeRate" timestamp="2021-12-09T20:08:24" tests="1" file="/Users/gabriel/dev/contracts/test/contracts/staking/stakingAccrualERC20/stakingAccrualERC20.test.ts" time="0.1650" failures="0">
    <testcase name="StakingAccrualERC20 Mutating functions #getExchangeRate updates total supply and exchange rate depends on staking and minting shares" time="0.1640" classname="updates total supply and exchange rate depends on staking and minting shares">
    </testcase>
  </testsuite>
  <testsuite name="Scenarios" timestamp="2021-12-09T20:08:24" tests="3" file="/Users/gabriel/dev/contracts/test/contracts/staking/stakingAccrualERC20/stakingAccrualERC20.test.ts" time="1.6360" failures="0">
    <testcase name="StakingAccrualERC20 Scenarios Two players with admin" time="0.2620" classname="Two players with admin">
    </testcase>
    <testcase name="StakingAccrualERC20 Scenarios Two players without admin" time="0.4420" classname="Two players without admin">
    </testcase>
    <testcase name="StakingAccrualERC20 Scenarios Complex scenario" time="0.9280" classname="Complex scenario">
    </testcase>
  </testsuite>
  <testsuite name="StakingAccrualERC20V5" timestamp="2021-12-09T20:08:26" tests="0" file="/Users/gabriel/dev/contracts/test/contracts/staking/stakingAccrualERC20/stakingAccrualERC20V4.test.ts" time="0.0000" failures="0">
  </testsuite>
  <testsuite name="Base functionality tests" timestamp="2021-12-09T20:08:27" tests="0" file="/Users/gabriel/dev/contracts/test/contracts/staking/stakingAccrualERC20/stakingAccrualERC20V4.test.ts" time="0.0000" failures="0">
  </testsuite>
  <testsuite name="Admin functions" timestamp="2021-12-09T20:08:27" tests="0" file="/Users/gabriel/dev/contracts/test/contracts/staking/stakingAccrualERC20/stakingAccrualERC20V4.test.ts" time="0.0000" failures="0">
  </testsuite>
  <testsuite name="#init" timestamp="2021-12-09T20:08:27" tests="4" file="/Users/gabriel/dev/contracts/test/contracts/staking/stakingAccrualERC20/stakingAccrualERC20V4.test.ts" time="0.1160" failures="0">
    <testcase name="StakingAccrualERC20V5 Base functionality tests Admin functions #init reverts if called by non-admin" time="0.0080" classname="reverts if called by non-admin">
    </testcase>
    <testcase name="StakingAccrualERC20V5 Base functionality tests Admin functions #init reverts if called twice" time="0.0470" classname="reverts if called twice">
    </testcase>
    <testcase name="StakingAccrualERC20V5 Base functionality tests Admin functions #init reverts if the staking token is address 0" time="0.0080" classname="reverts if the staking token is address 0">
    </testcase>
    <testcase name="StakingAccrualERC20V5 Base functionality tests Admin functions #init sets the staking token, the staking cooldown and the sablier contract" time="0.0480" classname="sets the staking token, the staking cooldown and the sablier contract">
    </testcase>
  </testsuite>
  <testsuite name="#setExitCooldownDuration" timestamp="2021-12-09T20:08:27" tests="2" file="/Users/gabriel/dev/contracts/test/contracts/staking/stakingAccrualERC20/stakingAccrualERC20V4.test.ts" time="0.0280" failures="0">
    <testcase name="StakingAccrualERC20V5 Base functionality tests Admin functions #setExitCooldownDuration reverts if called by non-admin" time="0.0040" classname="reverts if called by non-admin">
    </testcase>
    <testcase name="StakingAccrualERC20V5 Base functionality tests Admin functions #setExitCooldownDuration sets the cooldown duration" time="0.0230" classname="sets the cooldown duration">
    </testcase>
  </testsuite>
  <testsuite name="#recoverTokens" timestamp="2021-12-09T20:08:27" tests="3" file="/Users/gabriel/dev/contracts/test/contracts/staking/stakingAccrualERC20/stakingAccrualERC20V4.test.ts" time="0.3660" failures="0">
    <testcase name="StakingAccrualERC20V5 Base functionality tests Admin functions #recoverTokens reverts if called by non-admin" time="0.0040" classname="reverts if called by non-admin">
    </testcase>
    <testcase name="StakingAccrualERC20V5 Base functionality tests Admin functions #recoverTokens reverts if trying to recover more tokens than the supply" time="0.0030" classname="reverts if trying to recover more tokens than the supply">
    </testcase>
    <testcase name="StakingAccrualERC20V5 Base functionality tests Admin functions #recoverTokens recovers the staked tokens and reduces the supply" time="0.0920" classname="recovers the staked tokens and reduces the supply">
    </testcase>
  </testsuite>
  <testsuite name="#setSablierContract" timestamp="2021-12-09T20:08:27" tests="2" file="/Users/gabriel/dev/contracts/test/contracts/staking/stakingAccrualERC20/stakingAccrualERC20V4.test.ts" time="0.0490" failures="0">
    <testcase name="StakingAccrualERC20V5 Base functionality tests Admin functions #setSablierContract reverts if called by non-admin" time="0.0030" classname="reverts if called by non-admin">
    </testcase>
    <testcase name="StakingAccrualERC20V5 Base functionality tests Admin functions #setSablierContract sets the sablier contract if called the admin" time="0.0250" classname="sets the sablier contract if called the admin">
    </testcase>
  </testsuite>
  <testsuite name="#setSablierStreamId" timestamp="2021-12-09T20:08:27" tests="3" file="/Users/gabriel/dev/contracts/test/contracts/staking/stakingAccrualERC20/stakingAccrualERC20V4.test.ts" time="0.1330" failures="0">
    <testcase name="StakingAccrualERC20V5 Base functionality tests Admin functions #setSablierStreamId reverts if called by non-admin" time="0.0040" classname="reverts if called by non-admin">
    </testcase>
    <testcase name="StakingAccrualERC20V5 Base functionality tests Admin functions #setSablierStreamId reverts if setting an incorrect ID" time="0.0050" classname="reverts if setting an incorrect ID">
    </testcase>
    <testcase name="StakingAccrualERC20V5 Base functionality tests Admin functions #setSablierStreamId sets the sablier stream ID" time="0.1210" classname="sets the sablier stream ID">
    </testcase>
  </testsuite>
  <testsuite name="#setProofProtocol" timestamp="2021-12-09T20:08:27" tests="2" file="/Users/gabriel/dev/contracts/test/contracts/staking/stakingAccrualERC20/stakingAccrualERC20V4.test.ts" time="0.0660" failures="0">
    <testcase name="StakingAccrualERC20V5 Base functionality tests Admin functions #setProofProtocol reverts if called by non-admin" time="0.0050" classname="reverts if called by non-admin">
    </testcase>
    <testcase name="StakingAccrualERC20V5 Base functionality tests Admin functions #setProofProtocol sets the proof protocol" time="0.0580" classname="sets the proof protocol">
    </testcase>
  </testsuite>
  <testsuite name="#claimStreamFunds" timestamp="2021-12-09T20:08:27" tests="1" file="/Users/gabriel/dev/contracts/test/contracts/staking/stakingAccrualERC20/stakingAccrualERC20V4.test.ts" time="0.3440" failures="0">
    <testcase name="StakingAccrualERC20V5 Base functionality tests Admin functions #claimStreamFunds claims the funds from the sablier stream" time="0.3440" classname="claims the funds from the sablier stream">
    </testcase>
  </testsuite>
  <testsuite name="Mutating functions" timestamp="2021-12-09T20:08:28" tests="0" file="/Users/gabriel/dev/contracts/test/contracts/staking/stakingAccrualERC20/stakingAccrualERC20V4.test.ts" time="0.0000" failures="0">
  </testsuite>
  <testsuite name="#stake" timestamp="2021-12-09T20:08:28" tests="4" file="/Users/gabriel/dev/contracts/test/contracts/staking/stakingAccrualERC20/stakingAccrualERC20V4.test.ts" time="0.5560" failures="0">
    <testcase name="StakingAccrualERC20V5 Base functionality tests Mutating functions #stake reverts if staking more than balance" time="0.0130" classname="reverts if staking more than balance">
    </testcase>
    <testcase name="StakingAccrualERC20V5 Base functionality tests Mutating functions #stake reverts if the user&apos;s cooldown timestamp is &gt; 0" time="0.1190" classname="reverts if the user&apos;s cooldown timestamp is &gt; 0">
    </testcase>
    <testcase name="StakingAccrualERC20V5 Base functionality tests Mutating functions #stake stakes the staking token and mints an equal amount of stARCx, with a proof" time="0.0940" classname="stakes the staking token and mints an equal amount of stARCx, with a proof">
    </testcase>
    <testcase name="StakingAccrualERC20V5 Base functionality tests Mutating functions #stake withdraws from the sablier stream" time="0.3280" classname="withdraws from the sablier stream">
    </testcase>
  </testsuite>
  <testsuite name="#startExitCooldown" timestamp="2021-12-09T20:08:28" tests="3" file="/Users/gabriel/dev/contracts/test/contracts/staking/stakingAccrualERC20/stakingAccrualERC20V4.test.ts" time="0.2910" failures="0">
    <testcase name="StakingAccrualERC20V5 Base functionality tests Mutating functions #startExitCooldown reverts if user has 0 balance" time="0.0040" classname="reverts if user has 0 balance">
    </testcase>
    <testcase name="StakingAccrualERC20V5 Base functionality tests Mutating functions #startExitCooldown starts the exit cooldown" time="0.1440" classname="starts the exit cooldown">
    </testcase>
    <testcase name="StakingAccrualERC20V5 Base functionality tests Mutating functions #startExitCooldown reverts if the exit cooldown is &gt; 0" time="0.1390" classname="reverts if the exit cooldown is &gt; 0">
    </testcase>
  </testsuite>
  <testsuite name="#exit" timestamp="2021-12-09T20:08:29" tests="8" file="/Users/gabriel/dev/contracts/test/contracts/staking/stakingAccrualERC20/stakingAccrualERC20V4.test.ts" time="2.1150" failures="0">
    <testcase name="StakingAccrualERC20V5 Base functionality tests Mutating functions #exit reverts if user has 0 balance" time="0.0080" classname="reverts if user has 0 balance">
    </testcase>
    <testcase name="StakingAccrualERC20V5 Base functionality tests Mutating functions #exit reverts if the cooldown timestamp is not passed" time="0.1190" classname="reverts if the cooldown timestamp is not passed">
    </testcase>
    <testcase name="StakingAccrualERC20V5 Base functionality tests Mutating functions #exit reverts if the startExitCooldown was not initiated" time="0.0980" classname="reverts if the startExitCooldown was not initiated">
    </testcase>
    <testcase name="StakingAccrualERC20V5 Base functionality tests Mutating functions #exit exits from the fund" time="0.1960" classname="exits from the fund">
    </testcase>
    <testcase name="StakingAccrualERC20V5 Base functionality tests Mutating functions #exit withdraws from the sablier stream" time="0.4600" classname="withdraws from the sablier stream">
    </testcase>
    <testcase name="StakingAccrualERC20V5 Base functionality tests Mutating functions #exit exits with MORE ARCx than initially if the contract has accumulated more tokens" time="0.2840" classname="exits with MORE ARCx than initially if the contract has accumulated more tokens">
    </testcase>
    <testcase name="StakingAccrualERC20V5 Base functionality tests Mutating functions #exit exits with LESS ARCx than initially if the admin had removed tokens" time="0.3330" classname="exits with LESS ARCx than initially if the admin had removed tokens">
    </testcase>
    <testcase name="StakingAccrualERC20V5 Base functionality tests Mutating functions #exit exits at the end of the sablier stream" time="0.6090" classname="exits at the end of the sablier stream">
    </testcase>
  </testsuite>
  <testsuite name="#getExchangeRate" timestamp="2021-12-09T20:08:31" tests="1" file="/Users/gabriel/dev/contracts/test/contracts/staking/stakingAccrualERC20/stakingAccrualERC20V4.test.ts" time="0.2130" failures="0">
    <testcase name="StakingAccrualERC20V5 Base functionality tests Mutating functions #getExchangeRate updates total supply and exchange rate depends on staking and minting shares" time="0.2100" classname="updates total supply and exchange rate depends on staking and minting shares">
    </testcase>
  </testsuite>
  <testsuite name="Scenarios" timestamp="2021-12-09T20:08:31" tests="3" file="/Users/gabriel/dev/contracts/test/contracts/staking/stakingAccrualERC20/stakingAccrualERC20V4.test.ts" time="2.7150" failures="0">
    <testcase name="StakingAccrualERC20V5 Base functionality tests Scenarios Two players with admin" time="0.2890" classname="Two players with admin">
    </testcase>
    <testcase name="StakingAccrualERC20V5 Base functionality tests Scenarios Two players without admin" time="1.3980" classname="Two players without admin">
    </testcase>
    <testcase name="StakingAccrualERC20V5 Base functionality tests Scenarios Complex scenario" time="1.0200" classname="Complex scenario">
    </testcase>
  </testsuite>
  <testsuite name="Upgrade specific tests" timestamp="2021-12-09T20:08:34" tests="0" file="/Users/gabriel/dev/contracts/test/contracts/staking/stakingAccrualERC20/stakingAccrualERC20V4.test.ts" time="0.0000" failures="0">
  </testsuite>
  <testsuite name="Upgradability" timestamp="2021-12-09T20:08:34" tests="2" file="/Users/gabriel/dev/contracts/test/contracts/staking/stakingAccrualERC20/stakingAccrualERC20V4.test.ts" time="0.2120" failures="0">
    <testcase name="StakingAccrualERC20V5 Upgrade specific tests Upgradability ensures starcx balances are unchanged" time="0.0040" classname="ensures starcx balances are unchanged">
    </testcase>
    <testcase name="StakingAccrualERC20V5 Upgrade specific tests Upgradability ensures users can exit" time="0.2060" classname="ensures users can exit">
    </testcase>
  </testsuite>
  <testsuite name="#stake" timestamp="2021-12-09T20:08:34" tests="5" file="/Users/gabriel/dev/contracts/test/contracts/staking/stakingAccrualERC20/stakingAccrualERC20V4.test.ts" time="0.8200" failures="0">
    <testcase name="StakingAccrualERC20V5 Upgrade specific tests #stake reverts if proof is set and no proof is provided" time="0.0130" classname="reverts if proof is set and no proof is provided">
    </testcase>
    <testcase name="StakingAccrualERC20V5 Upgrade specific tests #stake reverts if proof is set and the wrong proof is passed" time="0.0040" classname="reverts if proof is set and the wrong proof is passed">
    </testcase>
    <testcase name="StakingAccrualERC20V5 Upgrade specific tests #stake reverts if proof is set and the score is smaller than the threshold" time="0.0270" classname="reverts if proof is set and the score is smaller than the threshold">
    </testcase>
    <testcase name="StakingAccrualERC20V5 Upgrade specific tests #stake stakes if proof is set and score is greater than or equal to the threshold" time="0.1020" classname="stakes if proof is set and score is greater than or equal to the threshold">
    </testcase>
    <testcase name="StakingAccrualERC20V5 Upgrade specific tests #stake stakes if no proof is passed" time="0.0920" classname="stakes if no proof is passed">
    </testcase>
  </testsuite>
  <testsuite name="#setProofProtocol" timestamp="2021-12-09T20:08:35" tests="2" file="/Users/gabriel/dev/contracts/test/contracts/staking/stakingAccrualERC20/stakingAccrualERC20V4.test.ts" time="0.0530" failures="0">
    <testcase name="StakingAccrualERC20V5 Upgrade specific tests #setProofProtocol reverts if called by non-admin" time="0.0040" classname="reverts if called by non-admin">
    </testcase>
    <testcase name="StakingAccrualERC20V5 Upgrade specific tests #setProofProtocol sets the proof protocol" time="0.0480" classname="sets the proof protocol">
    </testcase>
  </testsuite>
  <testsuite name="#setScoreThreshold" timestamp="2021-12-09T20:08:35" tests="2" file="/Users/gabriel/dev/contracts/test/contracts/staking/stakingAccrualERC20/stakingAccrualERC20V4.test.ts" time="0.0340" failures="0">
    <testcase name="StakingAccrualERC20V5 Upgrade specific tests #setScoreThreshold reverts if called by non-admin" time="0.0050" classname="reverts if called by non-admin">
    </testcase>
    <testcase name="StakingAccrualERC20V5 Upgrade specific tests #setScoreThreshold sets the score threshold" time="0.0270" classname="sets the score threshold">
    </testcase>
  </testsuite>
  <testsuite name="#setPassportScoresContract" timestamp="2021-12-09T20:08:35" tests="2" file="/Users/gabriel/dev/contracts/test/contracts/staking/stakingAccrualERC20/stakingAccrualERC20V4.test.ts" time="0.0360" failures="0">
    <testcase name="StakingAccrualERC20V5 Upgrade specific tests #setPassportScoresContract reverts if called by non-admin" time="0.0040" classname="reverts if called by non-admin">
    </testcase>
    <testcase name="StakingAccrualERC20V5 Upgrade specific tests #setPassportScoresContract sets the passport scores contract" time="0.0280" classname="sets the passport scores contract">
    </testcase>
  </testsuite>
  <testsuite name="TokenAccrual" timestamp="2021-12-09T20:08:35" tests="4" file="/Users/gabriel/dev/contracts/test/contracts/staking/tokenAccrual.test.ts" time="0.6900" failures="0">
    <testcase name="TokenAccrual should be able to stake tokens" time="0.0610" classname="should be able to stake tokens">
    </testcase>
    <testcase name="TokenAccrual should be able to withdraw tokens" time="0.0940" classname="should be able to withdraw tokens">
    </testcase>
    <testcase name="TokenAccrual should be able to claim fees" time="0.1980" classname="should be able to claim fees">
    </testcase>
    <testcase name="TokenAccrual should be able to exit" time="0.0970" classname="should be able to exit">
    </testcase>
  </testsuite>
  <testsuite name="ArcxTokenV2" timestamp="2021-12-09T20:08:36" tests="0" file="/Users/gabriel/dev/contracts/test/contracts/token/arcxTokenV2.test.ts" time="0.0000" failures="0">
  </testsuite>
  <testsuite name="#constructor" timestamp="2021-12-09T20:08:36" tests="4" file="/Users/gabriel/dev/contracts/test/contracts/token/arcxTokenV2.test.ts" time="0.0320" failures="0">
    <testcase name="ArcxTokenV2 #constructor reverts if old token is address 0" time="0.0120" classname="reverts if old token is address 0">
    </testcase>
    <testcase name="ArcxTokenV2 #constructor sets the address of the old arcx token" time="0.0110" classname="sets the address of the old arcx token">
    </testcase>
    <testcase name="ArcxTokenV2 #constructor sets version = 2" time="0.0020" classname="sets version = 2">
    </testcase>
    <testcase name="ArcxTokenV2 #constructor sets pause operator to owner" time="0.0020" classname="sets pause operator to owner">
    </testcase>
  </testsuite>
  <testsuite name="#claim" timestamp="2021-12-09T20:08:36" tests="5" file="/Users/gabriel/dev/contracts/test/contracts/token/arcxTokenV2.test.ts" time="0.2590" failures="0">
    <testcase name="ArcxTokenV2 #claim reverts if token is not the owner of the old token" time="0.0300" classname="reverts if token is not the owner of the old token">
    </testcase>
    <testcase name="ArcxTokenV2 #claim reverts if user has a 0 balance of the old arcx token" time="0.0200" classname="reverts if user has a 0 balance of the old arcx token">
    </testcase>
    <testcase name="ArcxTokenV2 #claim reverts if token is paused" time="0.0550" classname="reverts if token is paused">
    </testcase>
    <testcase name="ArcxTokenV2 #claim burns the old tokens and mints the new tokens to the caller" time="0.0780" classname="burns the old tokens and mints the new tokens to the caller">
    </testcase>
    <testcase name="ArcxTokenV2 #claim emits the Claimed event" time="0.0710" classname="emits the Claimed event">
    </testcase>
  </testsuite>
  <testsuite name="#mint" timestamp="2021-12-09T20:08:36" tests="2" file="/Users/gabriel/dev/contracts/test/contracts/token/arcxTokenV2.test.ts" time="0.0190" failures="0">
    <testcase name="ArcxTokenV2 #mint reverts if called by non-owner" time="0.0040" classname="reverts if called by non-owner">
    </testcase>
    <testcase name="ArcxTokenV2 #mint mints tokens to user if called by owner" time="0.0130" classname="mints tokens to user if called by owner">
    </testcase>
  </testsuite>
  <testsuite name="#burn" timestamp="2021-12-09T20:08:36" tests="2" file="/Users/gabriel/dev/contracts/test/contracts/token/arcxTokenV2.test.ts" time="0.0370" failures="0">
    <testcase name="ArcxTokenV2 #burn reverts if called by non-owner" time="0.0040" classname="reverts if called by non-owner">
    </testcase>
    <testcase name="ArcxTokenV2 #burn burns the amount of tokens if called by owner" time="0.0320" classname="burns the amount of tokens if called by owner">
    </testcase>
  </testsuite>
  <testsuite name="#transferOtherOwnership" timestamp="2021-12-09T20:08:36" tests="4" file="/Users/gabriel/dev/contracts/test/contracts/token/arcxTokenV2.test.ts" time="0.0850" failures="0">
    <testcase name="ArcxTokenV2 #transferOtherOwnership reverts if called by non-owner" time="0.0030" classname="reverts if called by non-owner">
    </testcase>
    <testcase name="ArcxTokenV2 #transferOtherOwnership reverts if called on a target that is not owned by the contract" time="0.0150" classname="reverts if called on a target that is not owned by the contract">
    </testcase>
    <testcase name="ArcxTokenV2 #transferOtherOwnership calls transferOwnership on the target if called by owner" time="0.0140" classname="calls transferOwnership on the target if called by owner">
    </testcase>
    <testcase name="ArcxTokenV2 #transferOtherOwnership emits OtherOwnershipTransfered" time="0.0140" classname="emits OtherOwnershipTransfered">
    </testcase>
  </testsuite>
  <testsuite name="#setPause" timestamp="2021-12-09T20:08:36" tests="3" file="/Users/gabriel/dev/contracts/test/contracts/token/arcxTokenV2.test.ts" time="0.0300" failures="0">
    <testcase name="ArcxTokenV2 #setPause is initially not paused" time="0.0020" classname="is initially not paused">
    </testcase>
    <testcase name="ArcxTokenV2 #setPause reverts if called by unauthorized user" time="0.0040" classname="reverts if called by unauthorized user">
    </testcase>
    <testcase name="ArcxTokenV2 #setPause pauses the contract if called by pause operator" time="0.0190" classname="pauses the contract if called by pause operator">
    </testcase>
  </testsuite>
  <testsuite name="#updatePauseOperator" timestamp="2021-12-09T20:08:36" tests="2" file="/Users/gabriel/dev/contracts/test/contracts/token/arcxTokenV2.test.ts" time="0.0280" failures="0">
    <testcase name="ArcxTokenV2 #updatePauseOperator reverts if called by non-owner" time="0.0050" classname="reverts if called by non-owner">
    </testcase>
    <testcase name="ArcxTokenV2 #updatePauseOperator updates the pause operator" time="0.0210" classname="updates the pause operator">
    </testcase>
  </testsuite>
  <testsuite name="#transfer" timestamp="2021-12-09T20:08:36" tests="1" file="/Users/gabriel/dev/contracts/test/contracts/token/arcxTokenV2.test.ts" time="0.0250" failures="0">
    <testcase name="ArcxTokenV2 #transfer reverts if contract is paused" time="0.0230" classname="reverts if contract is paused">
    </testcase>
  </testsuite>
  <testsuite name="#transferFrom" timestamp="2021-12-09T20:08:36" tests="1" file="/Users/gabriel/dev/contracts/test/contracts/token/arcxTokenV2.test.ts" time="0.0480" failures="0">
    <testcase name="ArcxTokenV2 #transferFrom reverts if contract is paused" time="0.0480" classname="reverts if contract is paused">
    </testcase>
  </testsuite>
  <testsuite name="DefiPassport" timestamp="2021-12-09T20:08:36" tests="1" file="/Users/gabriel/dev/contracts/test/contracts/token/defiPassport.test.ts" time="0.0000" failures="0">
    <testcase name="DefiPassport check burn implementation integrity" time="0.2140" classname="check burn implementation integrity">
    </testcase>
  </testsuite>
  <testsuite name="#init" timestamp="2021-12-09T20:08:37" tests="3" file="/Users/gabriel/dev/contracts/test/contracts/token/defiPassport.test.ts" time="0.0800" failures="0">
    <testcase name="DefiPassport #init reverts if called by non-admin" time="0.0050" classname="reverts if called by non-admin">
    </testcase>
    <testcase name="DefiPassport #init sets the name and symbol of the NFT" time="0.0650" classname="sets the name and symbol of the NFT">
    </testcase>
    <testcase name="DefiPassport #init reverts if called a second time" time="0.0060" classname="reverts if called a second time">
    </testcase>
  </testsuite>
  <testsuite name="#mint" timestamp="2021-12-09T20:08:37" tests="6" file="/Users/gabriel/dev/contracts/test/contracts/token/defiPassport.test.ts" time="0.4500" failures="0">
    <testcase name="DefiPassport #mint reverts if the skin is not approved" time="0.0040" classname="reverts if the skin is not approved">
    </testcase>
    <testcase name="DefiPassport #mint reverts if the receiver is not the skin owner" time="0.0340" classname="reverts if the receiver is not the skin owner">
    </testcase>
    <testcase name="DefiPassport #mint reverts if minting with a default skin that does not exist" time="0.0420" classname="reverts if minting with a default skin that does not exist">
    </testcase>
    <testcase name="DefiPassport #mint mints the passport to the receiver with a default skin and no proof" time="0.1070" classname="mints the passport to the receiver with a default skin and no proof">
    </testcase>
    <testcase name="DefiPassport #mint mints the passport to the receiver with an owned skin" time="0.1280" classname="mints the passport to the receiver with an owned skin">
    </testcase>
    <testcase name="DefiPassport #mint reverts if the receiver already has a passport" time="0.1270" classname="reverts if the receiver already has a passport">
    </testcase>
  </testsuite>
  <testsuite name="#setBaseURI" timestamp="2021-12-09T20:08:37" tests="3" file="/Users/gabriel/dev/contracts/test/contracts/token/defiPassport.test.ts" time="0.1810" failures="0">
    <testcase name="DefiPassport #setBaseURI reverts if called by non-admin" time="0.0050" classname="reverts if called by non-admin">
    </testcase>
    <testcase name="DefiPassport #setBaseURI sets the base URI of tokens" time="0.0380" classname="sets the base URI of tokens">
    </testcase>
    <testcase name="DefiPassport #setBaseURI it is included in the token URI" time="0.1320" classname="it is included in the token URI">
    </testcase>
  </testsuite>
  <testsuite name="#setActiveSkin" timestamp="2021-12-09T20:08:37" tests="10" file="/Users/gabriel/dev/contracts/test/contracts/token/defiPassport.test.ts" time="1.7650" failures="0">
    <testcase name="DefiPassport #setActiveSkin reverts if caller has no passport" time="0.0040" classname="reverts if caller has no passport">
    </testcase>
    <testcase name="DefiPassport #setActiveSkin reverts if caller does not own the specified skin" time="0.0030" classname="reverts if caller does not own the specified skin">
    </testcase>
    <testcase name="DefiPassport #setActiveSkin reverts if the skin is not approved nor default" time="0.0300" classname="reverts if the skin is not approved nor default">
    </testcase>
    <testcase name="DefiPassport #setActiveSkin reverts if the skin address is approved but has different id" time="0.0150" classname="reverts if the skin address is approved but has different id">
    </testcase>
    <testcase name="DefiPassport #setActiveSkin reverts if the skin contract is whitelisted but the caller is not the owner of the token id" time="0.0310" classname="reverts if the skin contract is whitelisted but the caller is not the owner of the token id">
    </testcase>
    <testcase name="DefiPassport #setActiveSkin sets the skin if it is owned and approved" time="0.1100" classname="sets the skin if it is owned and approved">
    </testcase>
    <testcase name="DefiPassport #setActiveSkin sets the skin and transfer it afterwards" time="0.1720" classname="sets the skin and transfer it afterwards">
    </testcase>
    <testcase name="DefiPassport #setActiveSkin sets the same skin but different skin token ID" time="0.0830" classname="sets the same skin but different skin token ID">
    </testcase>
    <testcase name="DefiPassport #setActiveSkin sets a default skin even if it is not owned by the user" time="0.0860" classname="sets a default skin even if it is not owned by the user">
    </testcase>
    <testcase name="DefiPassport #setActiveSkin sets the skin if it is whitelisted and owned even if it was not approved" time="0.1020" classname="sets the skin if it is whitelisted and owned even if it was not approved">
    </testcase>
  </testsuite>
  <testsuite name="#isSkinAvailable" timestamp="2021-12-09T20:08:39" tests="6" file="/Users/gabriel/dev/contracts/test/contracts/token/defiPassport.test.ts" time="4.2780" failures="0">
    <testcase name="DefiPassport #isSkinAvailable returns false if skin does not exist" time="0.0030" classname="returns false if skin does not exist">
    </testcase>
    <testcase name="DefiPassport #isSkinAvailable returns false if the skin is not a default skin" time="0.0030" classname="returns false if the skin is not a default skin">
    </testcase>
    <testcase name="DefiPassport #isSkinAvailable returns true if the skin is registered as a default skin" time="0.0420" classname="returns true if the skin is registered as a default skin">
    </testcase>
    <testcase name="DefiPassport #isSkinAvailable returns false if the skin is approved but not owned by the user" time="0.0270" classname="returns false if the skin is approved but not owned by the user">
    </testcase>
    <testcase name="DefiPassport #isSkinAvailable returns true if the skin is approved and owned by the user" time="0.0390" classname="returns true if the skin is approved and owned by the user">
    </testcase>
    <testcase name="DefiPassport #isSkinAvailable returns true if a skin is an ERC1155" time="4.1380" classname="returns true if a skin is an ERC1155">
    </testcase>
  </testsuite>
  <testsuite name="#setSkinManager" timestamp="2021-12-09T20:08:43" tests="3" file="/Users/gabriel/dev/contracts/test/contracts/token/defiPassport.test.ts" time="0.1350" failures="0">
    <testcase name="DefiPassport #setSkinManager reverts if called by non-admin" time="0.0680" classname="reverts if called by non-admin">
    </testcase>
    <testcase name="DefiPassport #setSkinManager reverts if sets the same skin manager" time="0.0040" classname="reverts if sets the same skin manager">
    </testcase>
    <testcase name="DefiPassport #setSkinManager sets the skin manager if called by admin" time="0.0560" classname="sets the skin manager if called by admin">
    </testcase>
  </testsuite>
  <testsuite name="#setWhitelistedSkin" timestamp="2021-12-09T20:08:44" tests="3" file="/Users/gabriel/dev/contracts/test/contracts/token/defiPassport.test.ts" time="0.1130" failures="0">
    <testcase name="DefiPassport #setWhitelistedSkin reverts if called by non-skin-manager" time="0.0050" classname="reverts if called by non-skin-manager">
    </testcase>
    <testcase name="DefiPassport #setWhitelistedSkin reverts if address is not a contract" time="0.0050" classname="reverts if address is not a contract">
    </testcase>
    <testcase name="DefiPassport #setWhitelistedSkin adds/removes the skin to the mapping of whitelisted skins" time="0.1000" classname="adds/removes the skin to the mapping of whitelisted skins">
    </testcase>
  </testsuite>
  <testsuite name="#setApprovedSkin" timestamp="2021-12-09T20:08:44" tests="2" file="/Users/gabriel/dev/contracts/test/contracts/token/defiPassport.test.ts" time="0.0410" failures="0">
    <testcase name="DefiPassport #setApprovedSkin reverts if called by non-skin-manager" time="0.0050" classname="reverts if called by non-skin-manager">
    </testcase>
    <testcase name="DefiPassport #setApprovedSkin approves the skin" time="0.0340" classname="approves the skin">
    </testcase>
  </testsuite>
  <testsuite name="#setApprovedSkins" timestamp="2021-12-09T20:08:44" tests="2" file="/Users/gabriel/dev/contracts/test/contracts/token/defiPassport.test.ts" time="0.5410" failures="0">
    <testcase name="DefiPassport #setApprovedSkins reverts if called by non-skin-manager" time="0.0060" classname="reverts if called by non-skin-manager">
    </testcase>
    <testcase name="DefiPassport #setApprovedSkins sets the approved status correctly to multiple skins" time="0.5330" classname="sets the approved status correctly to multiple skins">
    </testcase>
  </testsuite>
  <testsuite name="#setDefaultSkin" timestamp="2021-12-09T20:08:44" tests="5" file="/Users/gabriel/dev/contracts/test/contracts/token/defiPassport.test.ts" time="0.2720" failures="0">
    <testcase name="DefiPassport #setDefaultSkin reverts if called by non-skin-manager" time="0.0040" classname="reverts if called by non-skin-manager">
    </testcase>
    <testcase name="DefiPassport #setDefaultSkin reverts if default token does not have token id eq 1" time="0.0270" classname="reverts if default token does not have token id eq 1">
    </testcase>
    <testcase name="DefiPassport #setDefaultSkin reverts if default skin is repeated" time="0.0440" classname="reverts if default skin is repeated">
    </testcase>
    <testcase name="DefiPassport #setDefaultSkin toggles skins as default" time="0.1460" classname="toggles skins as default">
    </testcase>
    <testcase name="DefiPassport #setDefaultSkin cannot toggle if active default skin was not updated" time="0.0480" classname="cannot toggle if active default skin was not updated">
    </testcase>
  </testsuite>
  <testsuite name="#setActiveDefaultSkin" timestamp="2021-12-09T20:08:45" tests="5" file="/Users/gabriel/dev/contracts/test/contracts/token/defiPassport.test.ts" time="0.2760" failures="0">
    <testcase name="DefiPassport #setActiveDefaultSkin reverts if called by non-skin-manager" time="0.0040" classname="reverts if called by non-skin-manager">
    </testcase>
    <testcase name="DefiPassport #setActiveDefaultSkin reverts if setting a skin that is not registered as a default skin" time="0.0040" classname="reverts if setting a skin that is not registered as a default skin">
    </testcase>
    <testcase name="DefiPassport #setActiveDefaultSkin reverts if setting the same skin twice" time="0.0440" classname="reverts if setting the same skin twice">
    </testcase>
    <testcase name="DefiPassport #setActiveDefaultSkin sets the default active skin as the skin manager" time="0.0970" classname="sets the default active skin as the skin manager">
    </testcase>
    <testcase name="DefiPassport #setActiveDefaultSkin changes the default active skin id" time="0.1230" classname="changes the default active skin id">
    </testcase>
  </testsuite>
  <testsuite name="#approve" timestamp="2021-12-09T20:08:45" tests="1" file="/Users/gabriel/dev/contracts/test/contracts/token/defiPassport.test.ts" time="0.1150" failures="0">
    <testcase name="DefiPassport #approve reverts - defi passports are not transferrable" time="0.1140" classname="reverts - defi passports are not transferrable">
    </testcase>
  </testsuite>
  <testsuite name="#transferFrom" timestamp="2021-12-09T20:08:45" tests="1" file="/Users/gabriel/dev/contracts/test/contracts/token/defiPassport.test.ts" time="0.1170" failures="0">
    <testcase name="DefiPassport #transferFrom reverts - defi passports are not transferrable" time="0.1150" classname="reverts - defi passports are not transferrable">
    </testcase>
  </testsuite>
  <testsuite name="#safeTransferFrom(from, to, tokenId)" timestamp="2021-12-09T20:08:45" tests="1" file="/Users/gabriel/dev/contracts/test/contracts/token/defiPassport.test.ts" time="0.1110" failures="0">
    <testcase name="DefiPassport #safeTransferFrom(from, to, tokenId) reverts - defi passports are not transferrable" time="0.1110" classname="reverts - defi passports are not transferrable">
    </testcase>
  </testsuite>
  <testsuite name="#safeTransferFrom(from, to, tokenId, _data)" timestamp="2021-12-09T20:08:45" tests="1" file="/Users/gabriel/dev/contracts/test/contracts/token/defiPassport.test.ts" time="0.1200" failures="0">
    <testcase name="DefiPassport #safeTransferFrom(from, to, tokenId, _data) reverts - defi passports are not transferrable" time="0.1170" classname="reverts - defi passports are not transferrable">
    </testcase>
  </testsuite>
  <testsuite name="#setApprovalForAll" timestamp="2021-12-09T20:08:45" tests="1" file="/Users/gabriel/dev/contracts/test/contracts/token/defiPassport.test.ts" time="0.0040" failures="0">
    <testcase name="DefiPassport #setApprovalForAll reverts - defi passports are not transferrable" time="0.0030" classname="reverts - defi passports are not transferrable">
    </testcase>
  </testsuite>
  <testsuite name="SyntheticTokenV2" timestamp="2021-12-09T20:08:45" tests="0" file="/Users/gabriel/dev/contracts/test/contracts/token/syntheticTokenV2.test.ts" time="0.0000" failures="0">
  </testsuite>
  <testsuite name="view functions" timestamp="2021-12-09T20:08:45" tests="0" file="/Users/gabriel/dev/contracts/test/contracts/token/syntheticTokenV2.test.ts" time="0.0000" failures="0">
  </testsuite>
  <testsuite name="#decimals" timestamp="2021-12-09T20:08:45" tests="1" file="/Users/gabriel/dev/contracts/test/contracts/token/syntheticTokenV2.test.ts" time="0.0040" failures="0">
    <testcase name="SyntheticTokenV2 view functions #decimals returns 18 decimals" time="0.0020" classname="returns 18 decimals">
    </testcase>
  </testsuite>
  <testsuite name="#getAllMinters" timestamp="2021-12-09T20:08:45" tests="1" file="/Users/gabriel/dev/contracts/test/contracts/token/syntheticTokenV2.test.ts" time="0.0420" failures="0">
    <testcase name="SyntheticTokenV2 view functions #getAllMinters returns all minters" time="0.0420" classname="returns all minters">
    </testcase>
  </testsuite>
  <testsuite name="#isValidMinter" timestamp="2021-12-09T20:08:45" tests="1" file="/Users/gabriel/dev/contracts/test/contracts/token/syntheticTokenV2.test.ts" time="0.0390" failures="0">
    <testcase name="SyntheticTokenV2 view functions #isValidMinter returns true if minter is valid" time="0.0370" classname="returns true if minter is valid">
    </testcase>
  </testsuite>
  <testsuite name="#getMinterIssued" timestamp="2021-12-09T20:08:45" tests="1" file="/Users/gabriel/dev/contracts/test/contracts/token/syntheticTokenV2.test.ts" time="0.0660" failures="0">
    <testcase name="SyntheticTokenV2 view functions #getMinterIssued returns the amount of synth issued for the given minter" time="0.0640" classname="returns the amount of synth issued for the given minter">
    </testcase>
  </testsuite>
  <testsuite name="mutative functions" timestamp="2021-12-09T20:08:46" tests="0" file="/Users/gabriel/dev/contracts/test/contracts/token/syntheticTokenV2.test.ts" time="0.0000" failures="0">
  </testsuite>
  <testsuite name="#init" timestamp="2021-12-09T20:08:46" tests="3" file="/Users/gabriel/dev/contracts/test/contracts/token/syntheticTokenV2.test.ts" time="0.1130" failures="0">
    <testcase name="SyntheticTokenV2 mutative functions #init reverts if called twice" time="0.0050" classname="reverts if called twice">
    </testcase>
    <testcase name="SyntheticTokenV2 mutative functions #init initializes token with name, symbol and version" time="0.0100" classname="initializes token with name, symbol and version">
    </testcase>
    <testcase name="SyntheticTokenV2 mutative functions #init emits InitCalled" time="0.0940" classname="emits InitCalled">
    </testcase>
  </testsuite>
  <testsuite name="#mint" timestamp="2021-12-09T20:08:46" tests="5" file="/Users/gabriel/dev/contracts/test/contracts/token/syntheticTokenV2.test.ts" time="0.1430" failures="0">
    <testcase name="SyntheticTokenV2 mutative functions #mint should not be able to mint as an unauthorised user" time="0.0110" classname="should not be able to mint as an unauthorised user">
    </testcase>
    <testcase name="SyntheticTokenV2 mutative functions #mint should be able to mint as arc" time="0.0380" classname="should be able to mint as arc">
    </testcase>
    <testcase name="SyntheticTokenV2 mutative functions #mint mints to the limit" time="0.0380" classname="mints to the limit">
    </testcase>
    <testcase name="SyntheticTokenV2 mutative functions #mint should not be able to mint over the limit" time="0.0040" classname="should not be able to mint over the limit">
    </testcase>
    <testcase name="SyntheticTokenV2 mutative functions #mint increases the totalSupply" time="0.0370" classname="increases the totalSupply">
    </testcase>
  </testsuite>
  <testsuite name="#addMinter" timestamp="2021-12-09T20:08:46" tests="5" file="/Users/gabriel/dev/contracts/test/contracts/token/syntheticTokenV2.test.ts" time="0.2410" failures="0">
    <testcase name="SyntheticTokenV2 mutative functions #addMinter should not be able to add a minter as an unauthorised user" time="0.0040" classname="should not be able to add a minter as an unauthorised user">
    </testcase>
    <testcase name="SyntheticTokenV2 mutative functions #addMinter should be able to add a minter as the owner" time="0.1880" classname="should be able to add a minter as the owner">
    </testcase>
    <testcase name="SyntheticTokenV2 mutative functions #addMinter should not be able to add a minter as another minter" time="0.0080" classname="should not be able to add a minter as another minter">
    </testcase>
    <testcase name="SyntheticTokenV2 mutative functions #addMinter should not be able to re-add a minter as the owner" time="0.0040" classname="should not be able to re-add a minter as the owner">
    </testcase>
    <testcase name="SyntheticTokenV2 mutative functions #addMinter emits MinterAdded" time="0.0310" classname="emits MinterAdded">
    </testcase>
  </testsuite>
  <testsuite name="#removeMinter" timestamp="2021-12-09T20:08:46" tests="4" file="/Users/gabriel/dev/contracts/test/contracts/token/syntheticTokenV2.test.ts" time="0.0720" failures="0">
    <testcase name="SyntheticTokenV2 mutative functions #removeMinter should not be able to remove a minter as an unauthorised user" time="0.0060" classname="should not be able to remove a minter as an unauthorised user">
    </testcase>
    <testcase name="SyntheticTokenV2 mutative functions #removeMinter should be able to remove a minter as the owner" time="0.0310" classname="should be able to remove a minter as the owner">
    </testcase>
    <testcase name="SyntheticTokenV2 mutative functions #removeMinter should not be able to remove a minter as another minter" time="0.0040" classname="should not be able to remove a minter as another minter">
    </testcase>
    <testcase name="SyntheticTokenV2 mutative functions #removeMinter should not be able to remove a non-existent minter as the owner" time="0.0290" classname="should not be able to remove a non-existent minter as the owner">
    </testcase>
  </testsuite>
  <testsuite name="#updateMinterLimit" timestamp="2021-12-09T20:08:46" tests="4" file="/Users/gabriel/dev/contracts/test/contracts/token/syntheticTokenV2.test.ts" time="0.1640" failures="0">
    <testcase name="SyntheticTokenV2 mutative functions #updateMinterLimit should not be able to update the limit as an unauthorised user" time="0.0040" classname="should not be able to update the limit as an unauthorised user">
    </testcase>
    <testcase name="SyntheticTokenV2 mutative functions #updateMinterLimit should not be able to set the limit for an invalid minter" time="0.0040" classname="should not be able to set the limit for an invalid minter">
    </testcase>
    <testcase name="SyntheticTokenV2 mutative functions #updateMinterLimit should be able to update the limit as the owner" time="0.0270" classname="should be able to update the limit as the owner">
    </testcase>
    <testcase name="SyntheticTokenV2 mutative functions #updateMinterLimit should be able to mint more if the limits increase" time="0.1260" classname="should be able to mint more if the limits increase">
    </testcase>
  </testsuite>
  <testsuite name="#burn" timestamp="2021-12-09T20:08:46" tests="2" file="/Users/gabriel/dev/contracts/test/contracts/token/syntheticTokenV2.test.ts" time="0.0400" failures="0">
    <testcase name="SyntheticTokenV2 mutative functions #burn reverts if trying to burn more tokens than the balance" time="0.0080" classname="reverts if trying to burn more tokens than the balance">
    </testcase>
    <testcase name="SyntheticTokenV2 mutative functions #burn burns the caller&apos;s tokens" time="0.0300" classname="burns the caller&apos;s tokens">
    </testcase>
  </testsuite>
  <testsuite name="#destroy" timestamp="2021-12-09T20:08:46" tests="4" file="/Users/gabriel/dev/contracts/test/contracts/token/syntheticTokenV2.test.ts" time="0.2090" failures="0">
    <testcase name="SyntheticTokenV2 mutative functions #destroy reverts if called by a non-minter" time="0.0050" classname="reverts if called by a non-minter">
    </testcase>
    <testcase name="SyntheticTokenV2 mutative functions #destroy reverts if trying to destroy more tokens than the balance" time="0.0370" classname="reverts if trying to destroy more tokens than the balance">
    </testcase>
    <testcase name="SyntheticTokenV2 mutative functions #destroy destroys the given amount of caller&apos;s tokens" time="0.0700" classname="destroys the given amount of caller&apos;s tokens">
    </testcase>
    <testcase name="SyntheticTokenV2 mutative functions #destroy destroys more than the issue limit" time="0.0960" classname="destroys more than the issue limit">
    </testcase>
  </testsuite>
  <testsuite name="#approve" timestamp="2021-12-09T20:08:47" tests="2" file="/Users/gabriel/dev/contracts/test/contracts/token/syntheticTokenV2.test.ts" time="0.0320" failures="0">
    <testcase name="SyntheticTokenV2 mutative functions #approve reverts if approving to zero address" time="0.0040" classname="reverts if approving to zero address">
    </testcase>
    <testcase name="SyntheticTokenV2 mutative functions #approve approves spender and increases allowance" time="0.0240" classname="approves spender and increases allowance">
    </testcase>
  </testsuite>
  <testsuite name="#transfer" timestamp="2021-12-09T20:08:47" tests="2" file="/Users/gabriel/dev/contracts/test/contracts/token/syntheticTokenV2.test.ts" time="0.0380" failures="0">
    <testcase name="SyntheticTokenV2 mutative functions #transfer reverts if caller does not have enough tokens" time="0.0040" classname="reverts if caller does not have enough tokens">
    </testcase>
    <testcase name="SyntheticTokenV2 mutative functions #transfer transfers the tokens to the recepient" time="0.0300" classname="transfers the tokens to the recepient">
    </testcase>
  </testsuite>
  <testsuite name="#transferFrom" timestamp="2021-12-09T20:08:47" tests="2" file="/Users/gabriel/dev/contracts/test/contracts/token/syntheticTokenV2.test.ts" time="0.0800" failures="0">
    <testcase name="SyntheticTokenV2 mutative functions #transferFrom reverts if sender did not approve the caller" time="0.0080" classname="reverts if sender did not approve the caller">
    </testcase>
    <testcase name="SyntheticTokenV2 mutative functions #transferFrom transfers the tokens from the sender to the recipient" time="0.0690" classname="transfers the tokens from the sender to the recipient">
    </testcase>
  </testsuite>
  <testsuite name="MerkleDistributor" timestamp="2021-12-09T20:08:47" tests="0" file="/Users/gabriel/dev/contracts/test/distributor/MerkleDistributor.test.ts" time="0.0000" failures="0">
  </testsuite>
  <testsuite name="#token" timestamp="2021-12-09T20:08:47" tests="1" file="/Users/gabriel/dev/contracts/test/distributor/MerkleDistributor.test.ts" time="0.0050" failures="0">
    <testcase name="MerkleDistributor #token returns the ctx.contracts.collateral address" time="0.0030" classname="returns the ctx.contracts.collateral address">
    </testcase>
  </testsuite>
  <testsuite name="#merkleRoot" timestamp="2021-12-09T20:08:47" tests="1" file="/Users/gabriel/dev/contracts/test/distributor/MerkleDistributor.test.ts" time="0.0010" failures="0">
    <testcase name="MerkleDistributor #merkleRoot returns the zero merkle root" time="0.0010" classname="returns the zero merkle root">
    </testcase>
  </testsuite>
  <testsuite name="#switchActive" timestamp="2021-12-09T20:08:47" tests="2" file="/Users/gabriel/dev/contracts/test/distributor/MerkleDistributor.test.ts" time="0.0200" failures="0">
    <testcase name="MerkleDistributor #switchActive owner can switch activity" time="0.0080" classname="owner can switch activity">
    </testcase>
    <testcase name="MerkleDistributor #switchActive fails if non-owner try to switch activity" time="0.0080" classname="fails if non-owner try to switch activity">
    </testcase>
  </testsuite>
  <testsuite name="#claim" timestamp="2021-12-09T20:08:47" tests="3" file="/Users/gabriel/dev/contracts/test/distributor/MerkleDistributor.test.ts" time="0.0000" failures="0">
    <testcase name="MerkleDistributor #claim fails for empty proof" time="0.0070" classname="fails for empty proof">
    </testcase>
    <testcase name="MerkleDistributor #claim fails for invalid index" time="0.0080" classname="fails for invalid index">
    </testcase>
    <testcase name="MerkleDistributor #claim fails for not active contract" time="0.0080" classname="fails for not active contract">
    </testcase>
  </testsuite>
  <testsuite name="two account tree" timestamp="2021-12-09T20:08:47" tests="9" file="/Users/gabriel/dev/contracts/test/distributor/MerkleDistributor.test.ts" time="0.4870" failures="0">
    <testcase name="MerkleDistributor #claim two account tree successful claim" time="0.0140" classname="successful claim">
    </testcase>
    <testcase name="MerkleDistributor #claim two account tree transfers the ctx.contracts.collateral" time="0.0090" classname="transfers the ctx.contracts.collateral">
    </testcase>
    <testcase name="MerkleDistributor #claim two account tree must have enough to transfer" time="0.0170" classname="must have enough to transfer">
    </testcase>
    <testcase name="MerkleDistributor #claim two account tree sets #isClaimed" time="0.0120" classname="sets #isClaimed">
    </testcase>
    <testcase name="MerkleDistributor #claim two account tree cannot allow two claims" time="0.0210" classname="cannot allow two claims">
    </testcase>
    <testcase name="MerkleDistributor #claim two account tree cannot claim more than once: 0 and then 1" time="0.0180" classname="cannot claim more than once: 0 and then 1">
    </testcase>
    <testcase name="MerkleDistributor #claim two account tree cannot claim more than once: 1 and then 0" time="0.0180" classname="cannot claim more than once: 1 and then 0">
    </testcase>
    <testcase name="MerkleDistributor #claim two account tree cannot claim for address other than proof" time="0.0040" classname="cannot claim for address other than proof">
    </testcase>
    <testcase name="MerkleDistributor #claim two account tree cannot claim more than proof" time="0.0040" classname="cannot claim more than proof">
    </testcase>
  </testsuite>
  <testsuite name="larger tree" timestamp="2021-12-09T20:08:47" tests="2" file="/Users/gabriel/dev/contracts/test/distributor/MerkleDistributor.test.ts" time="0.0870" failures="0">
    <testcase name="MerkleDistributor #claim larger tree claim index 4" time="0.0070" classname="claim index 4">
    </testcase>
    <testcase name="MerkleDistributor #claim larger tree claim index 8" time="0.0070" classname="claim index 8">
    </testcase>
  </testsuite>
  <testsuite name="realistic size tree" timestamp="2021-12-09T20:08:47" tests="2" file="/Users/gabriel/dev/contracts/test/distributor/MerkleDistributor.test.ts" time="3.7160" failures="0">
    <testcase name="MerkleDistributor #claim realistic size tree proof verification works" time="0.1470" classname="proof verification works">
    </testcase>
    <testcase name="MerkleDistributor #claim realistic size tree no double claims in random distribution" time="0.0390" classname="no double claims in random distribution">
    </testcase>
  </testsuite>
  <testsuite name="PassportScoreTree" timestamp="2021-12-09T20:08:51" tests="0" file="/Users/gabriel/dev/contracts/test/distributor/PassportScoreTree.test.ts" time="0.0000" failures="0">
  </testsuite>
  <testsuite name="#constructor" timestamp="2021-12-09T20:08:51" tests="3" file="/Users/gabriel/dev/contracts/test/distributor/PassportScoreTree.test.ts" time="0.0020" failures="0">
    <testcase name="PassportScoreTree #constructor fails if a score is duplicated" time="0.0010" classname="fails if a score is duplicated">
    </testcase>
    <testcase name="PassportScoreTree #constructor fails if there is more than 1 score type per address" time="0.0000" classname="fails if there is more than 1 score type per address">
    </testcase>
    <testcase name="PassportScoreTree #constructor successfully created" time="0.0000" classname="successfully created">
    </testcase>
  </testsuite>
  <testsuite name="Can scale" timestamp="2021-12-09T20:08:51" tests="6" file="/Users/gabriel/dev/contracts/test/distributor/PassportScoreTree.test.ts" time="3.2980" failures="0">
    <testcase name="PassportScoreTree Can scale to 1k scores" time="0.0050" classname="to 1k scores">
    </testcase>
    <testcase name="PassportScoreTree Can scale to 10k scores" time="0.0290" classname="to 10k scores">
    </testcase>
    <testcase name="PassportScoreTree Can scale to 100k scores" time="0.2480" classname="to 100k scores">
    </testcase>
    <testcase name="PassportScoreTree Can scale to 1m scores" time="3.0090" classname="to 1m scores">
    </testcase>
  </testsuite>
  <testsuite name="bBadgerOracle" timestamp="2021-12-09T20:08:54" tests="1" file="/Users/gabriel/dev/contracts/test/mainnet_fork/bBadgerOracle.test.ts" time="0.0000" failures="0">
  </testsuite>
  <testsuite name="bDIGGOracle" timestamp="2021-12-09T20:08:54" tests="1" file="/Users/gabriel/dev/contracts/test/mainnet_fork/bDIGGOracle.test.ts" time="0.0000" failures="0">
  </testsuite>
  <testsuite name="CTokenOracle" timestamp="2021-12-09T20:08:54" tests="1" file="/Users/gabriel/dev/contracts/test/mainnet_fork/cTokenOracle.test.ts" time="0.0000" failures="0">
  </testsuite>
  <testsuite name="ibETHOracle" timestamp="2021-12-09T20:08:54" tests="1" file="/Users/gabriel/dev/contracts/test/mainnet_fork/ibETHOracle.test.ts" time="0.0000" failures="0">
  </testsuite>
  <testsuite name="imUSDOracle" timestamp="2021-12-09T20:08:54" tests="1" file="/Users/gabriel/dev/contracts/test/mainnet_fork/imUSDOracle.test.ts" time="0.0000" failures="0">
  </testsuite>
  <testsuite name="ChainLinkOracle" timestamp="2021-12-09T20:08:54" tests="1" file="/Users/gabriel/dev/contracts/test/mainnet_fork/wethOracle.test.ts" time="1.9540" failures="0">
    <testcase name="ChainLinkOracle should give the correct price" time="0.4880" classname="should give the correct price">
    </testcase>
  </testsuite>
  <testsuite name="WstEthOracle" timestamp="2021-12-09T20:08:56" tests="1" file="/Users/gabriel/dev/contracts/test/mainnet_fork/wstEthOracle.test.ts" time="0.0010" failures="0">
  </testsuite>
  <testsuite name="XSushiOracle" timestamp="2021-12-09T20:08:56" tests="1" file="/Users/gabriel/dev/contracts/test/mainnet_fork/xSushiOracle.test.ts" time="0.0000" failures="0">
  </testsuite>
  <testsuite name="loadContracts" timestamp="2021-12-09T20:08:56" tests="2" file="/Users/gabriel/dev/contracts/test/utils/loadContracts.test.ts" time="0.0050" failures="0">
    <testcase name="loadContracts loads one contract" time="0.0050" classname="loads one contract">
    </testcase>
    <testcase name="loadContracts loads multiple contracts" time="0.0000" classname="loads multiple contracts">
    </testcase>
  </testsuite>
  <testsuite name="readCsv" timestamp="2021-12-09T20:08:56" tests="1" file="/Users/gabriel/dev/contracts/test/utils/readCsv.test.ts" time="0.0010" failures="0">
    <testcase name="readCsv correctly parse first line" time="0.0010" classname="correctly parse first line">
    </testcase>
  </testsuite>
</testsuites>